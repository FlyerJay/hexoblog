{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/uploads/avatar.png","path":"uploads/avatar.png","modified":0,"renderable":0},{"_id":"source/uploads/http-浏览器缓存-1.png","path":"uploads/http-浏览器缓存-1.png","modified":0,"renderable":0},{"_id":"source/uploads/http-浏览器缓存-2.png","path":"uploads/http-浏览器缓存-2.png","modified":0,"renderable":0},{"_id":"source/uploads/http-浏览器缓存-3.png","path":"uploads/http-浏览器缓存-3.png","modified":0,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"themes/next/.bowerrc","hash":"334da94ca6f024d60d012cc26ea655681e724ad8","modified":1499307906588},{"_id":"themes/next/.gitattributes","hash":"8454b9313cb1a97b63fb87e2d29daee497ce6249","modified":1499307906589},{"_id":"themes/next/.editorconfig","hash":"211d2c92bfdddb3e81ea946f4ca7a539f150f4da","modified":1499307906588},{"_id":"themes/next/.gitignore","hash":"de5b9b9e5b313b4a86e805b02f334d35c87bfe56","modified":1499307906590},{"_id":"themes/next/.hound.yml","hash":"289dcf5bfe92dbd680d54d6e0668f41c9c9c0c78","modified":1499307906590},{"_id":"themes/next/.javascript_ignore","hash":"74b54cf920cbbf4038a68e54b7138af8b8f45588","modified":1499307906591},{"_id":"themes/next/.jshintrc","hash":"b7d23f2ce8d99fa073f22f9960605f318acd7710","modified":1499307906591},{"_id":"themes/next/.travis.yml","hash":"360f38044910e74bf628b0799e19db90718b2cbe","modified":1499307906592},{"_id":"themes/next/_config.yml","hash":"b4e79ab6cf3c1fef3b7b3721423d834771bae5a5","modified":1502345626697},{"_id":"themes/next/.stylintrc","hash":"3b7f9785e9ad0dab764e1c535b40df02f4ff5fd6","modified":1499307906591},{"_id":"themes/next/LICENSE","hash":"ec44503d7e617144909e54533754f0147845f0c5","modified":1499307906592},{"_id":"themes/next/README.en.md","hash":"953873fe2ee79bfc567b16dcdf8f91c1410444f8","modified":1499307906592},{"_id":"themes/next/bower.json","hash":"bd70cf5988bbfc8cbcf13adae659151a55466524","modified":1499307906594},{"_id":"themes/next/README.md","hash":"06aaf1241e9e1619956c86d8b1397a643840a9d1","modified":1499307906593},{"_id":"themes/next/gulpfile.coffee","hash":"412defab3d93d404b7c26aaa0279e2e586e97454","modified":1499307906594},{"_id":"themes/next/package.json","hash":"a5c189d4c4e946e936d3b5e29e2d81ddaf03ff96","modified":1499307906623},{"_id":"source/_posts/HTTP-浏览器缓存.md","hash":"4d8533d55b4b5b7ea2f7d280ec061157a54abdd0","modified":1512091004234},{"_id":"source/_posts/关于闭包.md","hash":"1b556dc81178112a45ecf926f3b99490f6a65f33","modified":1512091005513},{"_id":"source/_posts/最近面试遇到一个问题.md","hash":"073c67fc0b04f1e51d4b8bbc901b2b5b063cc203","modified":1503284553204},{"_id":"source/tags/index.md","hash":"1c443e91ad7a8ab1666ff03a875c20b4f6336ca8","modified":1499307906587},{"_id":"source/about/index.md","hash":"1d37d9f70d45d6ccf6eb080c554c07c00f5be076","modified":1502872348638},{"_id":"source/_posts/Vue源码解析--如何实现数据变化的监听.md","hash":"fe12f924e06ff816c5175f07344353562cf82a8a","modified":1512091361405},{"_id":"source/_posts/再读js高程.md","hash":"e694362a91219887cdad5f14e023f7f15ab63c66","modified":1499394793448},{"_id":"source/uploads/avatar.png","hash":"d89d8eaae610858df96d7304237606d8d8396aa6","modified":1499307906588},{"_id":"source/uploads/http-浏览器缓存-1.png","hash":"215e5fa2c43d5caf62ab9baaaec6df5ad37ff54c","modified":1502335430990},{"_id":"source/uploads/http-浏览器缓存-2.png","hash":"76cb55ac24b288915925a36517d95b83289d754b","modified":1502336482422},{"_id":"source/uploads/http-浏览器缓存-3.png","hash":"106c3954ada1558f73486aa1f8579c1ade8454a6","modified":1502336531231},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"4de856de657a27f340f245eb491a1f52ceba1735","modified":1499307906590},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"5adfad3ef1b870063e621bc0838268eb2c7c697a","modified":1499307906589},{"_id":"themes/next/languages/de.yml","hash":"4be3e7d296d5592e0d111dfa6cbbff02602c972d","modified":1499307906595},{"_id":"themes/next/languages/default.yml","hash":"d912814caac150da1611c96843371a87714e52f9","modified":1499307906595},{"_id":"themes/next/languages/en.yml","hash":"b3ee45143bc014578db6b8ac0573f7c7b143a743","modified":1499307906595},{"_id":"themes/next/languages/ja.yml","hash":"1a608dc799c0f9c36b626bac6fe3404acb45b86d","modified":1499307906596},{"_id":"themes/next/languages/fr-FR.yml","hash":"0d5bd8bbbeafb72506124ed35e7509debc753612","modified":1499307906596},{"_id":"themes/next/languages/ko.yml","hash":"5c811514aef401317a9ec38b95679d6d2ef0ad42","modified":1499307906597},{"_id":"themes/next/languages/pt-BR.yml","hash":"cc8b5a67ec87b0d5aec6e253bab67ec3cfe3069c","modified":1499307906597},{"_id":"themes/next/languages/pt.yml","hash":"943475a7d681f37ede579cd62da9c50568ca0f8d","modified":1499307906598},{"_id":"themes/next/languages/ru.yml","hash":"84d41a111e497236b2c1fa16e9b91668a1f37037","modified":1499307906598},{"_id":"themes/next/languages/zh-hk.yml","hash":"b58c0d85daa4d62b0c9753a59de0739aa0120735","modified":1499307906599},{"_id":"themes/next/languages/zh-Hans.yml","hash":"3111ce4cc5f30868b3628f9f805d2aef3b75d1c1","modified":1499307906598},{"_id":"themes/next/languages/zh-tw.yml","hash":"8ce0a32411de111ae39d08e4bc936767dacdeb08","modified":1499307906599},{"_id":"themes/next/layout/_layout.swig","hash":"efa71671290bb4b497d83720282b36482b6b0efb","modified":1499307906600},{"_id":"themes/next/languages/id.yml","hash":"c0848e93bf33a1333ff232905b6b392b1e056dd1","modified":1499307906596},{"_id":"themes/next/layout/index.swig","hash":"e5b52e04296203262a400e8e36ae12426d31fd5b","modified":1499307906621},{"_id":"themes/next/layout/archive.swig","hash":"b867a08f6b43de8b5d700c84b943df55917407ae","modified":1499307906621},{"_id":"themes/next/layout/category.swig","hash":"58cf08388901f7549b1fca95548b2c79173aa840","modified":1499307906621},{"_id":"themes/next/layout/schedule.swig","hash":"459cd6d9887b7a2ebda9ba3a5585a718904adb02","modified":1499307906622},{"_id":"themes/next/layout/page.swig","hash":"2a13804aa186f6062738d136e430870c53789bf4","modified":1499307906622},{"_id":"themes/next/layout/tag.swig","hash":"6f764ea3ab11eeb7c530df45528d449b14f5dc62","modified":1499307906622},{"_id":"themes/next/scripts/merge-configs.js","hash":"3ce1be32bb77ee19da25e8dae7dc04e2afc46ca1","modified":1499307906623},{"_id":"themes/next/scripts/merge.js","hash":"39b84b937b2a9608b94e5872349a47200e1800ff","modified":1499307906624},{"_id":"themes/next/layout/post.swig","hash":"b8334c479840b7724638eec71971cbd8512ae58d","modified":1499307906622},{"_id":"themes/next/test/.jshintrc","hash":"c9fca43ae0d99718e45a6f5ce736a18ba5fc8fb6","modified":1499307906705},{"_id":"themes/next/test/helpers.js","hash":"f25e7f3265eb5a6e1ccbb5e5012fa9bebf134105","modified":1499307906705},{"_id":"themes/next/test/intern.js","hash":"db90b1063356727d72be0d77054fdc32fa882a66","modified":1499307906705},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1499307906654},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"6d40652784585d263c37b8a3723e43e04b926ca7","modified":1499307906601},{"_id":"themes/next/layout/_macro/reward.swig","hash":"b6cb171f0ed227b82b8f7601814af2df93f3a09a","modified":1499307906602},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"506feb56e9b1091187d2014742f63a17758df933","modified":1499307906601},{"_id":"themes/next/layout/_custom/header.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1499307906600},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"c5cc0070ca7c9a8dbd4b09e0398db536c3cdbe8a","modified":1499307906602},{"_id":"themes/next/layout/_macro/post.swig","hash":"79851872b6b4fbd24e4a5a946f263da85b0c265d","modified":1499307906601},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1499307906600},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"e7f58154ac734088372888742e0029ce7c690511","modified":1499307906602},{"_id":"themes/next/layout/_partials/comments.swig","hash":"5258c03149aa18e9abfeb8de10e435a406d9c924","modified":1499307906603},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"77c61e0baea3544df361b7338c3cd13dc84dde22","modified":1499307906605},{"_id":"themes/next/layout/_partials/footer.swig","hash":"683616f4a80796051e2346d80acf838a589450b0","modified":1499307906603},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"1634fb887842698e01ff6e632597fe03c75d2d01","modified":1499307906605},{"_id":"themes/next/layout/_partials/search.swig","hash":"b4ebe4a52a3b51efe549dd1cdee846103664f5eb","modified":1499307906605},{"_id":"themes/next/layout/_partials/head.swig","hash":"376adb0c482242ef8bcad31b93b99cc5c35e92fa","modified":1499307906603},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"c0f5a0955f69ca4ed9ee64a2d5f8aa75064935ad","modified":1499307906609},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"931808ad9b8d8390c0dcf9bdeb0954eeb9185d68","modified":1499307906610},{"_id":"themes/next/layout/_partials/header.swig","hash":"d6bf1d1554d91eaf1bfc40ba8905ae81673e5f45","modified":1499307906605},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"1ada0189069e17b0dc567ae4b4ee365b2ec0c7d7","modified":1499307906611},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"ba75672183d94f1de7c8bd0eeee497a58c70e889","modified":1499307906617},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"8301c9600bb3e47f7fb98b0e0332ef3c51bb1688","modified":1499307906617},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"a0bd3388587fd943baae0d84ca779a707fbcad89","modified":1499307906617},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"9a188938d46931d5f3882a140aa1c48b3a893f0c","modified":1499307906618},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"db15d7e1552aa2d2386a6b8a33b3b3a40bf9e43d","modified":1499307906618},{"_id":"themes/next/scripts/tags/button.js","hash":"aaf71be6b483fca7a65cd6296c2cf1c2271c26a6","modified":1499307906625},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"99b66949f18398689b904907af23c013be1b978f","modified":1499307906625},{"_id":"themes/next/scripts/tags/exturl.js","hash":"5022c0ba9f1d13192677cf1fd66005c57c3d0f53","modified":1499307906625},{"_id":"themes/next/scripts/tags/full-image.js","hash":"c9f833158c66bd72f627a0559cf96550e867aa72","modified":1499307906625},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"ac681b0d0d8d39ba3817336c0270c6787c2b6b70","modified":1499307906626},{"_id":"themes/next/scripts/tags/note.js","hash":"7dc14db08f2c74f8f1952534b424f220f5c000c6","modified":1499307906626},{"_id":"themes/next/source/css/main.styl","hash":"a91dbb7ef799f0a171b5e726c801139efe545176","modified":1499307906654},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"16505f61f19ba65f629dfd033f14ee9abcf18756","modified":1499307906654},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1499307906655},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1499307906655},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1499307906656},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1499307906655},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1499307906656},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1499307906657},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1499307906657},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1499307906658},{"_id":"themes/next/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1499307906657},{"_id":"themes/next/source/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1499307906658},{"_id":"themes/next/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1499307906657},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1499307906658},{"_id":"themes/next/source/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1499307906658},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1499307906610},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1499307906611},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1499307906645},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1499307906645},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1499307906645},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1499307906653},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1499307906653},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"a223919d2e1bf17ca4d6abb2c86f2efca9883dc1","modified":1499307906604},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"f5e487b0d213ca0bd94aa30bc23b240d65081627","modified":1499307906604},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"b6e4754498b5eeb470e11fd596227552d9070605","modified":1499307906607},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"a8c7f9ca7c605d039a1f3bf4e4d3183700a3dd62","modified":1499307906607},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"b25002a83cbd2ca0c4a5df87ad5bff26477c0457","modified":1499307906607},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"9e3d133ac5bcc6cb51702c83b2611a49811abad1","modified":1499307906608},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"d9e2d9282f9be6e04eae105964abb81e512bffed","modified":1499307906608},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"9b84ab576982b2c3bb0291da49143bc77fba3cc6","modified":1499307906610},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"d4fbffd7fa8f2090eb32a871872665d90a885fac","modified":1499307906609},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"12684840de632eb16e53ffa863166306a756fd4f","modified":1499307906609},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1499307906611},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"753d262911c27baf663fcaf199267133528656af","modified":1499307906612},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"71397a5823e8ec8aad3b68aace13150623b3e19d","modified":1499307906612},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"a10b7f19d7b5725527514622899df413a34a89db","modified":1499307906612},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"a79e7e0d809fcf407593dd7ed9e023db21c3cbd6","modified":1499307906612},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"7b11eac3a0685fa1ab2ab6ecff60afc4f15f0d16","modified":1499307906612},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"b1e13df83fb2b1d5d513b30b7aa6158b0837daab","modified":1499307906613},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"441f1a1b4e2f652d3b975995bd9d44ff4866f057","modified":1499307906613},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"8a399df90dadba5ad4e781445b58f4765aeb701e","modified":1499307906614},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"e9a0590dafde1046356620dd2b81e83b6b3b0936","modified":1499307906614},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"e495aed8fb36bf8015ddbd64366270a7debad2b0","modified":1499307906613},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"f9a1647a8f1866deeb94052d1f87a5df99cb1e70","modified":1499307906614},{"_id":"themes/next/layout/_third-party/comments/gentie.swig","hash":"0f38f053841ef77cdce56a84cfbb4dd4c3329486","modified":1499307906615},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"4c501ea0b9c494181eb3c607c5526a5754e7fbd8","modified":1499307906615},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"1600f340e0225361580c44890568dc07dbcf2c89","modified":1499307906615},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"0399bbdc524ba50930cb6f8e2d5628ff682fc612","modified":1499307906616},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"5830a52c2a555d3a1f19b67d7bf3d072376cdea9","modified":1499307906616},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"de95ec8920d1660680078451008f8bd69f14d082","modified":1499307906617},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"b83a51bbe0f1e2ded9819070840b0ea145f003a6","modified":1499307906615},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"af7f3e43cbdc4f88c13f101f0f341af96ace3383","modified":1499307906616},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"34599633658f3b0ffb487728b7766e1c7b551f5a","modified":1499307906619},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"fe95dd3d166634c466e19aa756e65ad6e8254d3e","modified":1499307906619},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"d8c98938719284fa06492c114d99a1904652a555","modified":1499307906620},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"4a10634dba16ddf2a3cbd4908dfbc97e9aa45469","modified":1499307906619},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"3403fdd8efde1a0afd11ae8a5a97673f5903087f","modified":1499307906644},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"a0f23e75a137d8c996c70e2059e0074f1e97a127","modified":1499307906645},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"531934ea21ef4dc9f0978512050f54834f0a6cff","modified":1499307906645},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"e55265c8a8a6ae0c3c08e3509de92ee62c3cb5f6","modified":1499307906653},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"09534b68bd1a708729b3cfffe17737e3af457757","modified":1499307906653},{"_id":"themes/next/source/css/_variables/base.styl","hash":"5b336489316d5efea069fe8bcea4479b53ec7545","modified":1499307906653},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"cb431b54ba9c692165a1f5a12e4c564a560f8058","modified":1499307906659},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"0ec035e20d1f26bf553a79877180ba312bea885c","modified":1499307906660},{"_id":"themes/next/source/js/src/exturl.js","hash":"a2a0f0de07e46211f74942a468f42ee270aa555c","modified":1499307906660},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"b35a7dc47b634197b93487cea8671a40a9fdffce","modified":1499307906660},{"_id":"themes/next/source/js/src/motion.js","hash":"ff9ea37d05c269e3a140c4ab448af03efc4bcc76","modified":1499307906661},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"02cf91514e41200bc9df5d8bdbeb58575ec06074","modified":1499307906662},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"1512c751d219577d338ac0780fb2bbd9075d5298","modified":1499307906660},{"_id":"themes/next/source/js/src/post-details.js","hash":"bfaf52b69aad96566aa21b785973441a2555b4ba","modified":1499307906661},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1499307906663},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"b7657be25fc52ec67c75ab5481bdcb483573338b","modified":1499307906662},{"_id":"themes/next/source/js/src/utils.js","hash":"4aceddc2ca32097a9832374da232b6f76af4d5f4","modified":1499307906662},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1499307906667},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"03ddbf76c1dd1afb93eed0b670d2eee747472ef1","modified":1499307906677},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"c31ff06a740955e44edd4403902e653ccabfd4db","modified":1499307906677},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1499307906677},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"ef4b2877e37d65025a28eea154b33fe66351493c","modified":1499307906667},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"b4aefc910578d76b267e86dfffdd5121c8db9aec","modified":1499307906677},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"71e7183634dc1b9449f590f15ebd7201add22ca7","modified":1499307906678},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"bf3eef9d647cd7c9b62feda3bc708c6cdd7c0877","modified":1499307906674},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"a9b3ee1e4db71a0e4ea6d5bed292d176dd68b261","modified":1499307906674},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1499307906674},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"68a9b9d53126405b0fa5f3324f1fb96dbcc547aa","modified":1499307906674},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"e0acf1db27b0cc16128a59c46db1db406b5c4c58","modified":1499307906694},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"90fa628f156d8045357ff11eaf32e61abacf10e8","modified":1499307906693},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4ded6fee668544778e97e38c2b211fc56c848e77","modified":1499307906693},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"b930297cb98b8e1dbd5abe9bc1ed9d5935d18ce8","modified":1499307906693},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"865d6c1328ab209a4376b9d2b7a7824369565f28","modified":1499307906691},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"f4a570908f6c89c6edfb1c74959e733eaadea4f2","modified":1499307906694},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"bf773ad48a0b9aa77681a89d7569eefc0f7b7b18","modified":1499307906694},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"8148492dd49aa876d32bb7d5b728d3f5bf6f5074","modified":1499307906695},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"92d92860418c4216aa59eb4cb4a556290a7ad9c3","modified":1499307906701},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"63da5e80ebb61bb66a2794d5936315ca44231f0c","modified":1499307906701},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1499307906704},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"dbbfb50f6502f6b81dcc9fee7b31f1e812da3464","modified":1499307906704},{"_id":"themes/next/source/js/src/affix.js","hash":"1b509c3b5b290a6f4607f0f06461a0c33acb69b1","modified":1499307906659},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1499307906704},{"_id":"themes/next/source/lib/jquery/index.js","hash":"17a740d68a1c330876c198b6a4d9319f379f3af2","modified":1499307906692},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"2530de0f3125a912756f6c0e9090cd012134a4c5","modified":1499307906619},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"4ba6f2a615693b9b5afc266d9c833697016085fd","modified":1499307906627},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"1dc2ed435e41ca041f43bd9633d5d95139afbb42","modified":1499307906627},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"22828f5141c0cecb9ef25a110e194cdfa3a36423","modified":1499307906627},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"7ad4081466b397e2a6204141bb7768b7c01bd93c","modified":1499307906627},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"ff4489cd582f518bba6909a301ac1292a38b4e96","modified":1499307906627},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"218cc936ba3518a3591b2c9eda46bc701edf7710","modified":1499307906618},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"88559b13ce94311405b170a0506ded91273beceb","modified":1499307906632},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"6eb4bcc3056bd279d000607e8b4dad50d368ca69","modified":1499307906638},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"12662536c7a07fff548abe94171f34b768dd610f","modified":1499307906643},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"c9218b48c56e52c06af9ce3cc8fbdae737cf16fe","modified":1499307906644},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"4998bedff9c84a09a294b8ef36ede2e3644d3528","modified":1499307906643},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"1da5c800d025345f212a3bf1be035060f4e5e6ed","modified":1499307906643},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"3f40e8a9fe8e7bd5cfc4cf4cbbbcb9539462e973","modified":1499307906644},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"ea9069645696f86c5df64208490876fe150c8cae","modified":1499307906644},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"25d5e45a355ee2093f3b8b8eeac125ebf3905026","modified":1499307906646},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"b1025c421406d2c24cc92a02ae28c1915b01e240","modified":1499307906646},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"26666c1f472bf5f3fb9bc62081cca22b4de15ccb","modified":1499307906647},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1499307906647},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"d0bfd1bef988c76f7d7dd72d88af6f0908a8b0db","modified":1499307906646},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"ce272226a1570f5f7c70243b751a5b0fe1671a88","modified":1499307906647},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9b913b73d31d21f057f97115ffab93cfa578b884","modified":1499307906648},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"31127dcbf4c7b4ada53ffbf1638b5fe325b7cbc0","modified":1499307906649},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"748dbfbf9c08e719ddc775958003c64b00d39dab","modified":1499307906650},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"f23ac53ab901c48859dd29eee6e386b60ff956ba","modified":1499307906650},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1499307906650},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"5dbc0d0c897e46760e5dbee416530d485c747bba","modified":1499307906650},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"bce344d3a665b4c55230d2a91eac2ad16d6f32fd","modified":1499307906651},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"1f6e2ce674735269599acc6d77b3ea18d31967fc","modified":1499307906652},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"86197902dfd3bededba10ba62b8f9f22e0420bde","modified":1499307906652},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"416988dca389e6e2fdfa51fa7f4ee07eb53f82fb","modified":1499307906651},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"4642e30010af8b2b037f5b43146b10a934941958","modified":1499307906652},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"c48d4a561d047b3705924949b3ab7b57bee94ecd","modified":1499307906652},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1499307906668},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1499307906668},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1499307906669},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1499307906669},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1499307906669},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1499307906670},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"c4358416f0a116d7f4037542fa3b385947e80908","modified":1499307906662},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"ae6318aeb62ad4ce7a7e9a4cdacd93ffb004f0fb","modified":1499307906673},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"82f33ad0842aa9c154d029e0dada2497d4eb1d57","modified":1499307906672},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"d71602cbca33b9ecdb7ab291b7f86a49530f3601","modified":1499307906673},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"3655f1fdf1e584c4d8e8d39026093ca306a5a341","modified":1499307906678},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"88af80502c44cd52ca81ffe7dc7276b7eccb06cf","modified":1499307906679},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1499307906679},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"1d6aeda0480d0e4cb6198edf7719d601d4ae2ccc","modified":1499307906676},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1499307906676},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"41ea797c68dbcff2f6fb3aba1d1043a22e7cc0f6","modified":1499307906700},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"a817b6c158cbc5bab3582713de9fe18a18a80552","modified":1499307906700},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1499307906691},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1499307906690},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"4237c6e9d59da349639de20e559e87c2c0218cfd","modified":1499307906703},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"4c4ef6e997d0c6e21de39c2daa0c768e12c8c6fa","modified":1499307906628},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d63e0cacc53dd375fcc113465a4328c59ff5f2c1","modified":1499307906629},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"53cde051e0337f4bf42fb8d6d7a79fa3fa6d4ef2","modified":1499307906628},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"1a0d059799a298fe17c49a44298d32cebde93785","modified":1499307906629},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"1727702eac5d326b5c81a667944a245016668231","modified":1499307906629},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"167986d0f649516671ddf7193eebba7b421cd115","modified":1499307906630},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"104b5c79cd891506e0beaf938b083685f1da8637","modified":1499307906631},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"7fb593f90d74a99c21840679933b9ef6fdc16a61","modified":1499307906631},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"0656e753f182c9f47fef7304c847b7587a85ef0d","modified":1499307906629},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"f9760ecf186954cee3ba4a149be334e9ba296b89","modified":1499307906631},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"4e3838d7ac81d9ad133960f0f7ed58a44a015285","modified":1499307906631},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"b3b783511bbd94af7e941abf8ff411885db7395b","modified":1499307906630},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"4783f85872bc7e218c1522a5c1c68cd27a5922db","modified":1499307906632},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"8cf318644acc8b4978537c263290363e21c7f5af","modified":1499307906632},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"a200c0a1c5a895ac9dc41e0641a5dfcd766be99b","modified":1499307906633},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"7fe4d4d656e86276c17cb4e48a560cb6a4def703","modified":1499307906630},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"caf263d1928496688c0e1419801eafd7e6919ce5","modified":1499307906633},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"cd9e214e502697f2f2db84eb721bac57a49b0fce","modified":1499307906634},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"5a982d8ef3b3623ea5f59e63728990f5623c1b57","modified":1499307906635},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"61ec8a8481e8b76f2943235256c6d4f89c751c1c","modified":1499307906634},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"a45f5fce643eec4e1b927165229d560364bcace1","modified":1499307906633},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"350469437b20ecfd6f3ca45e400478f8e3f71cfb","modified":1499307906635},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"01567edaea6978628aa5521a122a85434c418bfd","modified":1499307906635},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"27deb3d3a243d30022055dac7dad851024099a8b","modified":1499307906634},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"8355b0e9375b3245508efda0e18acd069c2aa767","modified":1499307906634},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"fcd89ba4f6f48269e5caa73307e8689f41019896","modified":1499307906633},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"7f2bdd6109614d35408ee5ac3335aad4464c69c7","modified":1499307906636},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"761eba9811b050b25d548cc0854de4824b41eb08","modified":1499307906636},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"61f8cea3c01acd600e90e1bc2a07def405503748","modified":1499307906637},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"ac060861b27b764bc4012fc362a25a332df4045a","modified":1499307906637},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"1153bb71edf253765145559674390e16dd67c633","modified":1499307906637},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"c9f76d4f6806ef70fa2160c97afa0a0e0ae5373e","modified":1499307906638},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"e71652d3216e289c8548b1ea2357822c1476a425","modified":1499307906638},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"a497ea244df7dd97d1b961412b56f94cc4031e23","modified":1499307906636},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"394888efec32749b353292a59ec7f1b609d6325e","modified":1499307906637},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"a3bdd71237afc112b2aa255f278cab6baeb25351","modified":1499307906639},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"702be9e57dd6ff5fa99642a1f6e3df26215b8805","modified":1499307906638},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"3159b55f35c40bd08e55b00148c523760a708c51","modified":1499307906639},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"2ad1a2a9bbf6742d1b0762c4c623b68113d1e0fe","modified":1499307906640},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"e3ad37f2da35e330616a044621ffa50565a20c88","modified":1499307906640},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"2fe76476432b31993338cb45cdb3b29a518b6379","modified":1499307906639},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"8420b4be386469337243336aee694297875bd439","modified":1499307906640},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"a6e7d698702c2e383dde3fde2abde27951679084","modified":1499307906641},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"5dbeed535d63a50265d96b396a5440f9bb31e4ba","modified":1499307906641},{"_id":"themes/next/source/css/_common/components/third-party/gentie.styl","hash":"cd526e814f9323a79fe835085d64867d34b3715d","modified":1499307906641},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"15975ba7456b96916b1dbac448a1a0d2c38b8f3d","modified":1499307906642},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"bba4f3bdb7517cd85376df3e1209b570c0548c69","modified":1499307906640},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"dc944a01dd59f5ed2d44bb22fdb21fc3f455948f","modified":1499307906642},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"717cc7f82be9cc151e23a7678601ff2fd3a7fa1d","modified":1499307906641},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"6516b70ee9e44f1cf9443412cc31bcccb6cdb684","modified":1499307906642},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"a07aa12cc36ac5c819670c2a3c17d07ed7a08986","modified":1499307906648},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1499307906649},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1499307906651},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1499307906670},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"51139a4c79573d372a347ef01a493222a1eaf10a","modified":1499307906671},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"d22b1629cb23a6181bebb70d0cf653ffe4b835c8","modified":1499307906672},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1499307906670},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"ee948b4489aedeb548a77c9e45d8c7c5732fd62d","modified":1499307906671},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1499307906671},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1499307906681},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1499307906684},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1499307906689},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"90a1b22129efc172e2dfcceeeb76bff58bc3192f","modified":1499307906667},{"_id":"themes/next/source/lib/three/three.min.js","hash":"26273b1cb4914850a89529b48091dc584f2c57b8","modified":1499307906699},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1499307906687},{"_id":"public/tags/index.html","hash":"61181cba1fb282334777af2297b342871383a347","modified":1511402541490},{"_id":"public/about/index.html","hash":"e8c118a9cc9c58cc1dc50c742318063dd293f56d","modified":1511402541491},{"_id":"public/2017/08/21/最近面试遇到一个问题/index.html","hash":"a6b08eeb9efef2afa4f3465b1d2d381d79c6648b","modified":1511402541491},{"_id":"public/archives/index.html","hash":"2e8f254c7f2ab60c79790e23e35ec91804c61dfa","modified":1511402541491},{"_id":"public/archives/2017/index.html","hash":"a6c1395640caeab312983311da88ab922f7b825f","modified":1511402541491},{"_id":"public/archives/2017/06/index.html","hash":"21aef3719e27659186602931ecf20464a1f13138","modified":1511402541491},{"_id":"public/archives/2017/07/index.html","hash":"fc6c2c5b5e94ad328c5d82a577bd148abcaaf3bc","modified":1511402541491},{"_id":"public/archives/2017/08/index.html","hash":"13615489685700a29621fe69af7e294773fb9cb5","modified":1511402541491},{"_id":"public/tags/http/index.html","hash":"a870ed6042b83b3c5bd570e5719ab9a551cbbce5","modified":1511402541492},{"_id":"public/tags/javascript/index.html","hash":"c0cbf3acdba179435dcf04b02f8e7f2d2129f7d4","modified":1511402541492},{"_id":"public/tags/面试经验/index.html","hash":"f660e2cfcd1b571a6f424eb6c21a4ccdf556394b","modified":1511402541492},{"_id":"public/2017/08/16/关于闭包/index.html","hash":"bb08b627ff1f7b71ffac08a94dfd2c99c6f0ca03","modified":1511402541492},{"_id":"public/2017/08/10/HTTP-浏览器缓存/index.html","hash":"7ab0b649718ac4451d7a00b9e96d2dd46be90938","modified":1511402541492},{"_id":"public/2017/07/06/再读js高程/index.html","hash":"5ca29daccd3a44037533c5e7d7445147f4b5e6a4","modified":1511402541492},{"_id":"public/2017/06/02/Vue源码解析--如何实现数据变化的监听/index.html","hash":"33a3d7a0c65cdbe2905591a31bd8248c41febcd1","modified":1511402541492},{"_id":"public/index.html","hash":"db1c5732fbd9c3c70fe47fa1bfd724ad3304a7f1","modified":1511402541492},{"_id":"public/uploads/avatar.png","hash":"d89d8eaae610858df96d7304237606d8d8396aa6","modified":1511402541520},{"_id":"public/uploads/http-浏览器缓存-1.png","hash":"215e5fa2c43d5caf62ab9baaaec6df5ad37ff54c","modified":1511402541520},{"_id":"public/uploads/http-浏览器缓存-2.png","hash":"76cb55ac24b288915925a36517d95b83289d754b","modified":1511402541520},{"_id":"public/uploads/http-浏览器缓存-3.png","hash":"106c3954ada1558f73486aa1f8579c1ade8454a6","modified":1511402541520},{"_id":"public/images/algolia_logo.svg","hash":"16505f61f19ba65f629dfd033f14ee9abcf18756","modified":1511402541520},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1511402541521},{"_id":"public/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1511402541521},{"_id":"public/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1511402541521},{"_id":"public/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1511402541521},{"_id":"public/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1511402541521},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1511402541521},{"_id":"public/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1511402541521},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1511402541522},{"_id":"public/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1511402541522},{"_id":"public/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1511402541522},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1511402541522},{"_id":"public/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1511402541522},{"_id":"public/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1511402541522},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1511402541522},{"_id":"public/lib/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1511402541522},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1511402541522},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1511402541522},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1511402541522},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1511402541522},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1511402541522},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1511402541522},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1511402541522},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1511402541523},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1511402542456},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1511402542466},{"_id":"public/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1511402542482},{"_id":"public/js/src/bootstrap.js","hash":"aab7be0a6e2724b3faa9338db93c19556c559625","modified":1511402542482},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1511402542482},{"_id":"public/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1511402542482},{"_id":"public/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1511402542482},{"_id":"public/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1511402542482},{"_id":"public/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1511402542483},{"_id":"public/js/src/post-details.js","hash":"af7a417dd1cb02465a7b98211653e7c6192e6d55","modified":1511402542483},{"_id":"public/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1511402542483},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1511402542483},{"_id":"public/js/src/utils.js","hash":"2041eae5ac81c392067bfbd1bba4399cb37beea1","modified":1511402542483},{"_id":"public/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1511402542483},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1511402542483},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1511402542483},{"_id":"public/lib/canvas-ribbon/canvas-ribbon.js","hash":"b614b73ba49ca9136fed7c387ee8df72fe65118f","modified":1511402542483},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1511402542483},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1511402542483},{"_id":"public/lib/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1511402542483},{"_id":"public/lib/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1511402542483},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1511402542483},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1511402542484},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1511402542484},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1511402542484},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1511402542484},{"_id":"public/js/src/schemes/pisces.js","hash":"79da92119bc246fe05d1626ac98426a83ec90a94","modified":1511402542484},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1511402542484},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1511402542484},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1511402542484},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1511402542484},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1511402542484},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1511402542484},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1511402542484},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1511402542484},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1511402542484},{"_id":"public/css/main.css","hash":"08e9ac28c3728ed1ea763e7a8b4b2e7998a31437","modified":1511402542484},{"_id":"public/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1511402542484},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1511402542484},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1511402542484},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1511402542485},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1511402542485},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1511402542485},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1511402542485},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1511402542485},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1511402542485},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1511402542485},{"_id":"public/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1511402542485},{"_id":"public/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1511402542485},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1511402542485},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1511402542486},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1511402542486},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1511402542573}],"Category":[],"Data":[],"Page":[{"title":"标签","date":"2017-06-02T08:12:40.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2017-06-02 16:12:40\ntype: 'tags'\n---\n","updated":"2017-07-06T02:25:06.587Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cjabu1rgy0001hktps41i7b9p","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"关于我","date":"2017-06-02T08:22:32.000Z","_content":"- 雪依旧&ensp;&ensp;前端程序员\n- 2015年毕业于重庆大学计算机系\n- 热爱互联网&ensp;&ensp;喜欢看书爱code\n- 常常以「以大多数人努力程度之低，还轮不到拼天赋」这句话自我安慰","source":"about/index.md","raw":"---\ntitle: 关于我\ndate: 2017-06-02 16:22:32\n---\n- 雪依旧&ensp;&ensp;前端程序员\n- 2015年毕业于重庆大学计算机系\n- 热爱互联网&ensp;&ensp;喜欢看书爱code\n- 常常以「以大多数人努力程度之低，还轮不到拼天赋」这句话自我安慰","updated":"2017-08-16T08:32:28.638Z","path":"about/index.html","comments":1,"layout":"page","_id":"cjabu1rh70003hktppcaiz32n","content":"<ul>\n<li>雪依旧&ensp;&ensp;前端程序员</li>\n<li>2015年毕业于重庆大学计算机系</li>\n<li>热爱互联网&ensp;&ensp;喜欢看书爱code</li>\n<li>常常以「以大多数人努力程度之低，还轮不到拼天赋」这句话自我安慰</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li>雪依旧&ensp;&ensp;前端程序员</li>\n<li>2015年毕业于重庆大学计算机系</li>\n<li>热爱互联网&ensp;&ensp;喜欢看书爱code</li>\n<li>常常以「以大多数人努力程度之低，还轮不到拼天赋」这句话自我安慰</li>\n</ul>\n"}],"Post":[{"title":"HTTP-浏览器缓存","date":"2017-08-10T02:59:48.000Z","_content":"### 前言\n&#8195;&#8195;浏览器缓存一直是困扰前端的一个大问题，有时候我们在服务器上发布了网站的新版本，而客户端的浏览器访问到的依然是旧版本。我们没有办法要求客户强制刷新以体验新版本。所以我们在搭建自己的网站之前认真了解一下浏览器的缓存机制是十分有必要的。\n### 什么是浏览器缓存？\n&#8195;&#8195;为了节约网络的资源加速浏览，浏览器在用户磁盘上对最近请求过的文档进行存储，当访问者再次请求这个页面时，浏览器就可以从本地磁盘显示文档，这样就可以加速页面的阅览。浏览器缓存除了要受到浏览器本身缓存策略的控制，还需要根据HTTP设置做出响应。本文的目的是介绍HTTP设置对浏览器缓存的影响，即使通常浏览器并不把这些设置暴露给用户。\n### Cache-Control\n&#8195;&#8195;还记得用chrome调试网页的经历吗？为了保证调试的时候总是取到最新的代码，我们往往会勾上Network中的Disable cache选项。![](/snow/uploads/http-浏览器缓存-1.png)但是你们有注意过勾上这一项之后到底发生了什么变化吗？\n未勾选Disable cache时的资源请求\n![](/snow/uploads/http-浏览器缓存-2.png)勾选Disable cache之后![](/snow/uploads/http-浏览器缓存-3.png)chorme发起http请求的时候Cache-control的值被默认设置为：max-age=0。max-age的取值如果大于等于0表示缓存多久之后去服务器请求新的资源，如果我们设置为100，那么在100秒内访问这个资源都不会去请求服务器而是从本地缓存拿。勾选Disable cache之后Cache-control的值被设置为no-cache，意味本地不缓存该资源，每次都去服务器拿最新的。Cache-Control还有一些其他的取值，但是在浏览器上一般就用到介绍的这两个值。（HTTP协议不只是针对客户端浏览器，还包括所有使用该协议的其他终端如代理、服务器等）\n### Expires\n&#8195;&#8195;Expires也是用来控制浏览器缓存的，同Cache-Control作用一样，但是Expires设置的是一个确切的时间，比如把Expires设置为2017-08-11 08:00:00，缓存的资源就会在这个时间到来的时过期。Expires和Cache-Control的区别就在于一个是相对的时间，另一个是绝对的时间。Cache-Control是较新的HTTP/1.1规范，如果同时设置Expires和Cache-Control，Expires会被Cache-Control所覆盖。\n### 服务器再验证\n&#8195;&#8195;如果缓存资源过期浏览器就需要向服务器发起请求，但是这个请求并不是直接向服务器请求新的资源，而是希望服务器告知过期的资源是不是需要更新，如果需要更新浏览器就拉取新的资源并更新缓存，如果不需要更新浏览器就重新设置过期时间并继续使用原来的资源返回给用户，这一过程被称为缓存的再验证。\n### If_Modified_Since（下面简称IMS）\n&#8195;&#8195;HTTP为缓存再验证提供了5种设置，IMS是比较常用的设置，其值为一个确切的时间点，浏览器发送的再验证请求会带上这个设置去服务器询问在这个日期之后资源是否发生过变化，如果有变化服务器就会把新的资源发送过来并带上新的过期时间。IMS的值一般是资源最后被修改的时间。IMS经常配合Last_Modified使用，Last_Modified是服务器维护的资源最后被修改的时间，包含IMS的HTTP请求到服务器之后，服务器会比对请求资源的Last_Modified和IMS。\n### If_None_Match（下面简称INM）\n&#8195;&#8195;有的时候单纯比较文档的更新时间并不十分科学，比如服务器上的资源只是被重写一次，或者更糟的情况是这个资源会周期性的被重写但是什么内容都没有改变，如果使用IMS验证得到的答案都是需要更新浏览器缓存。为了应对这种情况，服务器除了维护一个资源更新时间以外还会维护一个ETag来标志资源的版本号，只有资源内容被修改后才会更新ETag。浏览器如果想要实现与服务器的ETag进行比对，需要在再验证请求头种携带INM，服务器发现这个设置之后就会比对缓存的ETag和服务器的ETag，如果不同就新的资源及ETag回送到浏览器。IMS和INM同时使用时，会优先验证INM。\n>   本文中提到的设置一词均是指HTTP首部字段的配置，希望不会产生歧义。如果对HTTP缓存机制还意犹未尽的朋友可以看看《HTTP权威指南》一书，书中有提到如何实践缓存控制，或者看看以下博客：\n>   [Web 开发人员需知的 Web 缓存知识](http://www.oschina.net/news/41397/web-cache-knowledge)\n>   [浏览器缓存详解:expires,cache-control,last-modified,etag详细说明](http://blog.csdn.net/eroswang/article/details/8302191)","source":"_posts/HTTP-浏览器缓存.md","raw":"---\ntitle: HTTP-浏览器缓存\ndate: 2017-08-10 10:59:48\ntags: 'http'\n---\n### 前言\n&#8195;&#8195;浏览器缓存一直是困扰前端的一个大问题，有时候我们在服务器上发布了网站的新版本，而客户端的浏览器访问到的依然是旧版本。我们没有办法要求客户强制刷新以体验新版本。所以我们在搭建自己的网站之前认真了解一下浏览器的缓存机制是十分有必要的。\n### 什么是浏览器缓存？\n&#8195;&#8195;为了节约网络的资源加速浏览，浏览器在用户磁盘上对最近请求过的文档进行存储，当访问者再次请求这个页面时，浏览器就可以从本地磁盘显示文档，这样就可以加速页面的阅览。浏览器缓存除了要受到浏览器本身缓存策略的控制，还需要根据HTTP设置做出响应。本文的目的是介绍HTTP设置对浏览器缓存的影响，即使通常浏览器并不把这些设置暴露给用户。\n### Cache-Control\n&#8195;&#8195;还记得用chrome调试网页的经历吗？为了保证调试的时候总是取到最新的代码，我们往往会勾上Network中的Disable cache选项。![](/snow/uploads/http-浏览器缓存-1.png)但是你们有注意过勾上这一项之后到底发生了什么变化吗？\n未勾选Disable cache时的资源请求\n![](/snow/uploads/http-浏览器缓存-2.png)勾选Disable cache之后![](/snow/uploads/http-浏览器缓存-3.png)chorme发起http请求的时候Cache-control的值被默认设置为：max-age=0。max-age的取值如果大于等于0表示缓存多久之后去服务器请求新的资源，如果我们设置为100，那么在100秒内访问这个资源都不会去请求服务器而是从本地缓存拿。勾选Disable cache之后Cache-control的值被设置为no-cache，意味本地不缓存该资源，每次都去服务器拿最新的。Cache-Control还有一些其他的取值，但是在浏览器上一般就用到介绍的这两个值。（HTTP协议不只是针对客户端浏览器，还包括所有使用该协议的其他终端如代理、服务器等）\n### Expires\n&#8195;&#8195;Expires也是用来控制浏览器缓存的，同Cache-Control作用一样，但是Expires设置的是一个确切的时间，比如把Expires设置为2017-08-11 08:00:00，缓存的资源就会在这个时间到来的时过期。Expires和Cache-Control的区别就在于一个是相对的时间，另一个是绝对的时间。Cache-Control是较新的HTTP/1.1规范，如果同时设置Expires和Cache-Control，Expires会被Cache-Control所覆盖。\n### 服务器再验证\n&#8195;&#8195;如果缓存资源过期浏览器就需要向服务器发起请求，但是这个请求并不是直接向服务器请求新的资源，而是希望服务器告知过期的资源是不是需要更新，如果需要更新浏览器就拉取新的资源并更新缓存，如果不需要更新浏览器就重新设置过期时间并继续使用原来的资源返回给用户，这一过程被称为缓存的再验证。\n### If_Modified_Since（下面简称IMS）\n&#8195;&#8195;HTTP为缓存再验证提供了5种设置，IMS是比较常用的设置，其值为一个确切的时间点，浏览器发送的再验证请求会带上这个设置去服务器询问在这个日期之后资源是否发生过变化，如果有变化服务器就会把新的资源发送过来并带上新的过期时间。IMS的值一般是资源最后被修改的时间。IMS经常配合Last_Modified使用，Last_Modified是服务器维护的资源最后被修改的时间，包含IMS的HTTP请求到服务器之后，服务器会比对请求资源的Last_Modified和IMS。\n### If_None_Match（下面简称INM）\n&#8195;&#8195;有的时候单纯比较文档的更新时间并不十分科学，比如服务器上的资源只是被重写一次，或者更糟的情况是这个资源会周期性的被重写但是什么内容都没有改变，如果使用IMS验证得到的答案都是需要更新浏览器缓存。为了应对这种情况，服务器除了维护一个资源更新时间以外还会维护一个ETag来标志资源的版本号，只有资源内容被修改后才会更新ETag。浏览器如果想要实现与服务器的ETag进行比对，需要在再验证请求头种携带INM，服务器发现这个设置之后就会比对缓存的ETag和服务器的ETag，如果不同就新的资源及ETag回送到浏览器。IMS和INM同时使用时，会优先验证INM。\n>   本文中提到的设置一词均是指HTTP首部字段的配置，希望不会产生歧义。如果对HTTP缓存机制还意犹未尽的朋友可以看看《HTTP权威指南》一书，书中有提到如何实践缓存控制，或者看看以下博客：\n>   [Web 开发人员需知的 Web 缓存知识](http://www.oschina.net/news/41397/web-cache-knowledge)\n>   [浏览器缓存详解:expires,cache-control,last-modified,etag详细说明](http://blog.csdn.net/eroswang/article/details/8302191)","slug":"HTTP-浏览器缓存","published":1,"updated":"2017-12-01T01:16:44.234Z","_id":"cjabu1rgp0000hktplvufitlz","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>&#8195;&#8195;浏览器缓存一直是困扰前端的一个大问题，有时候我们在服务器上发布了网站的新版本，而客户端的浏览器访问到的依然是旧版本。我们没有办法要求客户强制刷新以体验新版本。所以我们在搭建自己的网站之前认真了解一下浏览器的缓存机制是十分有必要的。</p>\n<h3 id=\"什么是浏览器缓存？\"><a href=\"#什么是浏览器缓存？\" class=\"headerlink\" title=\"什么是浏览器缓存？\"></a>什么是浏览器缓存？</h3><p>&#8195;&#8195;为了节约网络的资源加速浏览，浏览器在用户磁盘上对最近请求过的文档进行存储，当访问者再次请求这个页面时，浏览器就可以从本地磁盘显示文档，这样就可以加速页面的阅览。浏览器缓存除了要受到浏览器本身缓存策略的控制，还需要根据HTTP设置做出响应。本文的目的是介绍HTTP设置对浏览器缓存的影响，即使通常浏览器并不把这些设置暴露给用户。</p>\n<h3 id=\"Cache-Control\"><a href=\"#Cache-Control\" class=\"headerlink\" title=\"Cache-Control\"></a>Cache-Control</h3><p>&#8195;&#8195;还记得用chrome调试网页的经历吗？为了保证调试的时候总是取到最新的代码，我们往往会勾上Network中的Disable cache选项。<img src=\"/snow/uploads/http-浏览器缓存-1.png\" alt=\"\">但是你们有注意过勾上这一项之后到底发生了什么变化吗？<br>未勾选Disable cache时的资源请求<br><img src=\"/snow/uploads/http-浏览器缓存-2.png\" alt=\"\">勾选Disable cache之后<img src=\"/snow/uploads/http-浏览器缓存-3.png\" alt=\"\">chorme发起http请求的时候Cache-control的值被默认设置为：max-age=0。max-age的取值如果大于等于0表示缓存多久之后去服务器请求新的资源，如果我们设置为100，那么在100秒内访问这个资源都不会去请求服务器而是从本地缓存拿。勾选Disable cache之后Cache-control的值被设置为no-cache，意味本地不缓存该资源，每次都去服务器拿最新的。Cache-Control还有一些其他的取值，但是在浏览器上一般就用到介绍的这两个值。（HTTP协议不只是针对客户端浏览器，还包括所有使用该协议的其他终端如代理、服务器等）</p>\n<h3 id=\"Expires\"><a href=\"#Expires\" class=\"headerlink\" title=\"Expires\"></a>Expires</h3><p>&#8195;&#8195;Expires也是用来控制浏览器缓存的，同Cache-Control作用一样，但是Expires设置的是一个确切的时间，比如把Expires设置为2017-08-11 08:00:00，缓存的资源就会在这个时间到来的时过期。Expires和Cache-Control的区别就在于一个是相对的时间，另一个是绝对的时间。Cache-Control是较新的HTTP/1.1规范，如果同时设置Expires和Cache-Control，Expires会被Cache-Control所覆盖。</p>\n<h3 id=\"服务器再验证\"><a href=\"#服务器再验证\" class=\"headerlink\" title=\"服务器再验证\"></a>服务器再验证</h3><p>&#8195;&#8195;如果缓存资源过期浏览器就需要向服务器发起请求，但是这个请求并不是直接向服务器请求新的资源，而是希望服务器告知过期的资源是不是需要更新，如果需要更新浏览器就拉取新的资源并更新缓存，如果不需要更新浏览器就重新设置过期时间并继续使用原来的资源返回给用户，这一过程被称为缓存的再验证。</p>\n<h3 id=\"If-Modified-Since（下面简称IMS）\"><a href=\"#If-Modified-Since（下面简称IMS）\" class=\"headerlink\" title=\"If_Modified_Since（下面简称IMS）\"></a>If_Modified_Since（下面简称IMS）</h3><p>&#8195;&#8195;HTTP为缓存再验证提供了5种设置，IMS是比较常用的设置，其值为一个确切的时间点，浏览器发送的再验证请求会带上这个设置去服务器询问在这个日期之后资源是否发生过变化，如果有变化服务器就会把新的资源发送过来并带上新的过期时间。IMS的值一般是资源最后被修改的时间。IMS经常配合Last_Modified使用，Last_Modified是服务器维护的资源最后被修改的时间，包含IMS的HTTP请求到服务器之后，服务器会比对请求资源的Last_Modified和IMS。</p>\n<h3 id=\"If-None-Match（下面简称INM）\"><a href=\"#If-None-Match（下面简称INM）\" class=\"headerlink\" title=\"If_None_Match（下面简称INM）\"></a>If_None_Match（下面简称INM）</h3><p>&#8195;&#8195;有的时候单纯比较文档的更新时间并不十分科学，比如服务器上的资源只是被重写一次，或者更糟的情况是这个资源会周期性的被重写但是什么内容都没有改变，如果使用IMS验证得到的答案都是需要更新浏览器缓存。为了应对这种情况，服务器除了维护一个资源更新时间以外还会维护一个ETag来标志资源的版本号，只有资源内容被修改后才会更新ETag。浏览器如果想要实现与服务器的ETag进行比对，需要在再验证请求头种携带INM，服务器发现这个设置之后就会比对缓存的ETag和服务器的ETag，如果不同就新的资源及ETag回送到浏览器。IMS和INM同时使用时，会优先验证INM。</p>\n<blockquote>\n<p>  本文中提到的设置一词均是指HTTP首部字段的配置，希望不会产生歧义。如果对HTTP缓存机制还意犹未尽的朋友可以看看《HTTP权威指南》一书，书中有提到如何实践缓存控制，或者看看以下博客：<br>  <a href=\"http://www.oschina.net/news/41397/web-cache-knowledge\" target=\"_blank\" rel=\"external\">Web 开发人员需知的 Web 缓存知识</a><br>  <a href=\"http://blog.csdn.net/eroswang/article/details/8302191\" target=\"_blank\" rel=\"external\">浏览器缓存详解:expires,cache-control,last-modified,etag详细说明</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>&#8195;&#8195;浏览器缓存一直是困扰前端的一个大问题，有时候我们在服务器上发布了网站的新版本，而客户端的浏览器访问到的依然是旧版本。我们没有办法要求客户强制刷新以体验新版本。所以我们在搭建自己的网站之前认真了解一下浏览器的缓存机制是十分有必要的。</p>\n<h3 id=\"什么是浏览器缓存？\"><a href=\"#什么是浏览器缓存？\" class=\"headerlink\" title=\"什么是浏览器缓存？\"></a>什么是浏览器缓存？</h3><p>&#8195;&#8195;为了节约网络的资源加速浏览，浏览器在用户磁盘上对最近请求过的文档进行存储，当访问者再次请求这个页面时，浏览器就可以从本地磁盘显示文档，这样就可以加速页面的阅览。浏览器缓存除了要受到浏览器本身缓存策略的控制，还需要根据HTTP设置做出响应。本文的目的是介绍HTTP设置对浏览器缓存的影响，即使通常浏览器并不把这些设置暴露给用户。</p>\n<h3 id=\"Cache-Control\"><a href=\"#Cache-Control\" class=\"headerlink\" title=\"Cache-Control\"></a>Cache-Control</h3><p>&#8195;&#8195;还记得用chrome调试网页的经历吗？为了保证调试的时候总是取到最新的代码，我们往往会勾上Network中的Disable cache选项。<img src=\"/snow/uploads/http-浏览器缓存-1.png\" alt=\"\">但是你们有注意过勾上这一项之后到底发生了什么变化吗？<br>未勾选Disable cache时的资源请求<br><img src=\"/snow/uploads/http-浏览器缓存-2.png\" alt=\"\">勾选Disable cache之后<img src=\"/snow/uploads/http-浏览器缓存-3.png\" alt=\"\">chorme发起http请求的时候Cache-control的值被默认设置为：max-age=0。max-age的取值如果大于等于0表示缓存多久之后去服务器请求新的资源，如果我们设置为100，那么在100秒内访问这个资源都不会去请求服务器而是从本地缓存拿。勾选Disable cache之后Cache-control的值被设置为no-cache，意味本地不缓存该资源，每次都去服务器拿最新的。Cache-Control还有一些其他的取值，但是在浏览器上一般就用到介绍的这两个值。（HTTP协议不只是针对客户端浏览器，还包括所有使用该协议的其他终端如代理、服务器等）</p>\n<h3 id=\"Expires\"><a href=\"#Expires\" class=\"headerlink\" title=\"Expires\"></a>Expires</h3><p>&#8195;&#8195;Expires也是用来控制浏览器缓存的，同Cache-Control作用一样，但是Expires设置的是一个确切的时间，比如把Expires设置为2017-08-11 08:00:00，缓存的资源就会在这个时间到来的时过期。Expires和Cache-Control的区别就在于一个是相对的时间，另一个是绝对的时间。Cache-Control是较新的HTTP/1.1规范，如果同时设置Expires和Cache-Control，Expires会被Cache-Control所覆盖。</p>\n<h3 id=\"服务器再验证\"><a href=\"#服务器再验证\" class=\"headerlink\" title=\"服务器再验证\"></a>服务器再验证</h3><p>&#8195;&#8195;如果缓存资源过期浏览器就需要向服务器发起请求，但是这个请求并不是直接向服务器请求新的资源，而是希望服务器告知过期的资源是不是需要更新，如果需要更新浏览器就拉取新的资源并更新缓存，如果不需要更新浏览器就重新设置过期时间并继续使用原来的资源返回给用户，这一过程被称为缓存的再验证。</p>\n<h3 id=\"If-Modified-Since（下面简称IMS）\"><a href=\"#If-Modified-Since（下面简称IMS）\" class=\"headerlink\" title=\"If_Modified_Since（下面简称IMS）\"></a>If_Modified_Since（下面简称IMS）</h3><p>&#8195;&#8195;HTTP为缓存再验证提供了5种设置，IMS是比较常用的设置，其值为一个确切的时间点，浏览器发送的再验证请求会带上这个设置去服务器询问在这个日期之后资源是否发生过变化，如果有变化服务器就会把新的资源发送过来并带上新的过期时间。IMS的值一般是资源最后被修改的时间。IMS经常配合Last_Modified使用，Last_Modified是服务器维护的资源最后被修改的时间，包含IMS的HTTP请求到服务器之后，服务器会比对请求资源的Last_Modified和IMS。</p>\n<h3 id=\"If-None-Match（下面简称INM）\"><a href=\"#If-None-Match（下面简称INM）\" class=\"headerlink\" title=\"If_None_Match（下面简称INM）\"></a>If_None_Match（下面简称INM）</h3><p>&#8195;&#8195;有的时候单纯比较文档的更新时间并不十分科学，比如服务器上的资源只是被重写一次，或者更糟的情况是这个资源会周期性的被重写但是什么内容都没有改变，如果使用IMS验证得到的答案都是需要更新浏览器缓存。为了应对这种情况，服务器除了维护一个资源更新时间以外还会维护一个ETag来标志资源的版本号，只有资源内容被修改后才会更新ETag。浏览器如果想要实现与服务器的ETag进行比对，需要在再验证请求头种携带INM，服务器发现这个设置之后就会比对缓存的ETag和服务器的ETag，如果不同就新的资源及ETag回送到浏览器。IMS和INM同时使用时，会优先验证INM。</p>\n<blockquote>\n<p>  本文中提到的设置一词均是指HTTP首部字段的配置，希望不会产生歧义。如果对HTTP缓存机制还意犹未尽的朋友可以看看《HTTP权威指南》一书，书中有提到如何实践缓存控制，或者看看以下博客：<br>  <a href=\"http://www.oschina.net/news/41397/web-cache-knowledge\" target=\"_blank\" rel=\"external\">Web 开发人员需知的 Web 缓存知识</a><br>  <a href=\"http://blog.csdn.net/eroswang/article/details/8302191\" target=\"_blank\" rel=\"external\">浏览器缓存详解:expires,cache-control,last-modified,etag详细说明</a></p>\n</blockquote>\n"},{"title":"关于闭包","date":"2017-08-16T02:50:37.000Z","_content":"### 前言\n&#8195;&#8195;javascript中的闭包一直是一个比较难理解的概念，建立在理解其的基础上应用更是一件难事。最近在看《精通javascript》，该书的作者之一是John Resig大神哦（安利一下这本书），书中对闭包的理解挺有意思，再结合之前看过的一些关于闭包的文章，在这里也来分享下我个人的理解。\n### 说说闭包\n在《js高程》中给闭包这样一个定义：有权访问另一个函数作用域的变量的函数，再看看《精通js》给的定义：内部函数在其父函数结束之后仍然能够访问其外围函数中的变量。总结一下这两个定义，闭包是一个函数可以访问其他函数的变量。在es5中作用域分为全局和函数两种，函数调用完成之后其作用域就会消失，其内部的变量也会被回收。而函数中如果存在另一个函数，情况就有些不同了，外部函数在执行完成之后作用域不会立即消失，而是会等到它内部的函数的调用结束，如果内部函数中还有其他函数，这个过程便会继续往下递归，直到所有内部存在的函数都调用结束。对于一些刚刚接触javascript的人来说可能不太容易理解，举一个例子吧：\n```javascript\n    function pureFunc(fn){\n        var caches = {};\n        return (function (in){\n            return caches[in] || (caches[in] = fn(in));\n        })\n    }\n    function square(x){\n        return x * x;\n    }\n    var purSquare = pureFunc(square);\n```\n上面这段代码是很经典的纯函数制造器的实现，关于纯函数这里不展开讨论（感兴趣可以百度下）。缓存输出是纯函数的特性之一，square函数通过pureFunc生成了它的纯函数版本pureSquare。在pureFunc调用结束之后返回了它的内部匿名函数并赋值给pureSquare形成了一个闭包。在pureSquare的调用结束之前caches都可以被访问（调用一词不太准确，应该用调用栈，调用栈保存了函数所有的调用记录，调用栈结束函数的生命也就走到尽头，调用栈如何追踪调用又如何结束那又是另一篇文章了，这里就不展开了，不妨看一下《你不知道的javascript》）。对于闭包还有一种更简洁的定义：使用闭包创建的函数可以记住它被创建时所处的环境。\n### Curry化\n函数科里化是很实用的一种编程技巧，先上一段代码：\n```javascript\n    function add( num ) {\n        return function(toAdd) {\n            return num + toAdd\n        }\n    }\n    var addFive = add( 5 );\n    //更普遍的写法是\n    function add ( a, b ) {\n        return a + b;\n    }\n\n    var addFive = function( a ) {\n        return add( a, 5);\n    }\n```\n一个函数原本需要多个参数，通过固定其中一些参数生成需要更少参数的函数版本的过程被称为函数的科里化。科里化其实也是利用了函数闭包的特性，只是往往人们会忽略掉参数也是函数的属性这一特性（arguments）。\n### IIFE\nIIFE（立即执行函数表达式）的使用是十分频繁的，打开任意一个第三方库几乎都能看到他的身影：\n```javascript\n    (function(win){\n        var a = 1;\n        function x () {\n            return a;\n        }\n        window.x = x;\n    })(window)\n```\n上面的代码通过向window中赋值x实现了对象的导出，这是很多第三方库的做法，通过IIFE定义的变量不会污染全局，只存在于其内部的作用域中，通过导出变量的方式提供给外部访问。\n\n> 本文纯属抛砖引玉，或许在将来某一天我自己回来看的时候也会发现很多疏漏和错误下面推荐一些书和文章\n> 《javascript高级程序设计》、《精通javascript》\n> [「谈谈」：闭包与Lambda](http://zora.ghost.io/tan-tan-bi-bao-yu-lambda/)","source":"_posts/关于闭包.md","raw":"---\ntitle: 关于闭包\ndate: 2017-08-16 10:50:37\ntags: 'javascript'\n---\n### 前言\n&#8195;&#8195;javascript中的闭包一直是一个比较难理解的概念，建立在理解其的基础上应用更是一件难事。最近在看《精通javascript》，该书的作者之一是John Resig大神哦（安利一下这本书），书中对闭包的理解挺有意思，再结合之前看过的一些关于闭包的文章，在这里也来分享下我个人的理解。\n### 说说闭包\n在《js高程》中给闭包这样一个定义：有权访问另一个函数作用域的变量的函数，再看看《精通js》给的定义：内部函数在其父函数结束之后仍然能够访问其外围函数中的变量。总结一下这两个定义，闭包是一个函数可以访问其他函数的变量。在es5中作用域分为全局和函数两种，函数调用完成之后其作用域就会消失，其内部的变量也会被回收。而函数中如果存在另一个函数，情况就有些不同了，外部函数在执行完成之后作用域不会立即消失，而是会等到它内部的函数的调用结束，如果内部函数中还有其他函数，这个过程便会继续往下递归，直到所有内部存在的函数都调用结束。对于一些刚刚接触javascript的人来说可能不太容易理解，举一个例子吧：\n```javascript\n    function pureFunc(fn){\n        var caches = {};\n        return (function (in){\n            return caches[in] || (caches[in] = fn(in));\n        })\n    }\n    function square(x){\n        return x * x;\n    }\n    var purSquare = pureFunc(square);\n```\n上面这段代码是很经典的纯函数制造器的实现，关于纯函数这里不展开讨论（感兴趣可以百度下）。缓存输出是纯函数的特性之一，square函数通过pureFunc生成了它的纯函数版本pureSquare。在pureFunc调用结束之后返回了它的内部匿名函数并赋值给pureSquare形成了一个闭包。在pureSquare的调用结束之前caches都可以被访问（调用一词不太准确，应该用调用栈，调用栈保存了函数所有的调用记录，调用栈结束函数的生命也就走到尽头，调用栈如何追踪调用又如何结束那又是另一篇文章了，这里就不展开了，不妨看一下《你不知道的javascript》）。对于闭包还有一种更简洁的定义：使用闭包创建的函数可以记住它被创建时所处的环境。\n### Curry化\n函数科里化是很实用的一种编程技巧，先上一段代码：\n```javascript\n    function add( num ) {\n        return function(toAdd) {\n            return num + toAdd\n        }\n    }\n    var addFive = add( 5 );\n    //更普遍的写法是\n    function add ( a, b ) {\n        return a + b;\n    }\n\n    var addFive = function( a ) {\n        return add( a, 5);\n    }\n```\n一个函数原本需要多个参数，通过固定其中一些参数生成需要更少参数的函数版本的过程被称为函数的科里化。科里化其实也是利用了函数闭包的特性，只是往往人们会忽略掉参数也是函数的属性这一特性（arguments）。\n### IIFE\nIIFE（立即执行函数表达式）的使用是十分频繁的，打开任意一个第三方库几乎都能看到他的身影：\n```javascript\n    (function(win){\n        var a = 1;\n        function x () {\n            return a;\n        }\n        window.x = x;\n    })(window)\n```\n上面的代码通过向window中赋值x实现了对象的导出，这是很多第三方库的做法，通过IIFE定义的变量不会污染全局，只存在于其内部的作用域中，通过导出变量的方式提供给外部访问。\n\n> 本文纯属抛砖引玉，或许在将来某一天我自己回来看的时候也会发现很多疏漏和错误下面推荐一些书和文章\n> 《javascript高级程序设计》、《精通javascript》\n> [「谈谈」：闭包与Lambda](http://zora.ghost.io/tan-tan-bi-bao-yu-lambda/)","slug":"关于闭包","published":1,"updated":"2017-12-01T01:16:45.513Z","_id":"cjabu1rh50002hktpjo6pd9eu","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>&#8195;&#8195;javascript中的闭包一直是一个比较难理解的概念，建立在理解其的基础上应用更是一件难事。最近在看《精通javascript》，该书的作者之一是John Resig大神哦（安利一下这本书），书中对闭包的理解挺有意思，再结合之前看过的一些关于闭包的文章，在这里也来分享下我个人的理解。</p>\n<h3 id=\"说说闭包\"><a href=\"#说说闭包\" class=\"headerlink\" title=\"说说闭包\"></a>说说闭包</h3><p>在《js高程》中给闭包这样一个定义：有权访问另一个函数作用域的变量的函数，再看看《精通js》给的定义：内部函数在其父函数结束之后仍然能够访问其外围函数中的变量。总结一下这两个定义，闭包是一个函数可以访问其他函数的变量。在es5中作用域分为全局和函数两种，函数调用完成之后其作用域就会消失，其内部的变量也会被回收。而函数中如果存在另一个函数，情况就有些不同了，外部函数在执行完成之后作用域不会立即消失，而是会等到它内部的函数的调用结束，如果内部函数中还有其他函数，这个过程便会继续往下递归，直到所有内部存在的函数都调用结束。对于一些刚刚接触javascript的人来说可能不太容易理解，举一个例子吧：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">pureFunc</span>(<span class=\"params\">fn</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> caches = &#123;&#125;;</div><div class=\"line\">    <span class=\"keyword\">return</span> (<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">in</span>)</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> caches[<span class=\"keyword\">in</span>] || (caches[<span class=\"keyword\">in</span>] = fn(<span class=\"keyword\">in</span>));</div><div class=\"line\">    &#125;)</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">square</span>(<span class=\"params\">x</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> x * x;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> purSquare = pureFunc(square);</div></pre></td></tr></table></figure></p>\n<p>上面这段代码是很经典的纯函数制造器的实现，关于纯函数这里不展开讨论（感兴趣可以百度下）。缓存输出是纯函数的特性之一，square函数通过pureFunc生成了它的纯函数版本pureSquare。在pureFunc调用结束之后返回了它的内部匿名函数并赋值给pureSquare形成了一个闭包。在pureSquare的调用结束之前caches都可以被访问（调用一词不太准确，应该用调用栈，调用栈保存了函数所有的调用记录，调用栈结束函数的生命也就走到尽头，调用栈如何追踪调用又如何结束那又是另一篇文章了，这里就不展开了，不妨看一下《你不知道的javascript》）。对于闭包还有一种更简洁的定义：使用闭包创建的函数可以记住它被创建时所处的环境。</p>\n<h3 id=\"Curry化\"><a href=\"#Curry化\" class=\"headerlink\" title=\"Curry化\"></a>Curry化</h3><p>函数科里化是很实用的一种编程技巧，先上一段代码：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span>(<span class=\"params\"> num </span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">toAdd</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> num + toAdd</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> addFive = add( <span class=\"number\">5</span> );</div><div class=\"line\"><span class=\"comment\">//更普遍的写法是</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span> (<span class=\"params\"> a, b </span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> a + b;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> addFive = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> a </span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> add( a, <span class=\"number\">5</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>一个函数原本需要多个参数，通过固定其中一些参数生成需要更少参数的函数版本的过程被称为函数的科里化。科里化其实也是利用了函数闭包的特性，只是往往人们会忽略掉参数也是函数的属性这一特性（arguments）。</p>\n<h3 id=\"IIFE\"><a href=\"#IIFE\" class=\"headerlink\" title=\"IIFE\"></a>IIFE</h3><p>IIFE（立即执行函数表达式）的使用是十分频繁的，打开任意一个第三方库几乎都能看到他的身影：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">win</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> a = <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">x</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> a;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"built_in\">window</span>.x = x;</div><div class=\"line\">&#125;)(<span class=\"built_in\">window</span>)</div></pre></td></tr></table></figure></p>\n<p>上面的代码通过向window中赋值x实现了对象的导出，这是很多第三方库的做法，通过IIFE定义的变量不会污染全局，只存在于其内部的作用域中，通过导出变量的方式提供给外部访问。</p>\n<blockquote>\n<p>本文纯属抛砖引玉，或许在将来某一天我自己回来看的时候也会发现很多疏漏和错误下面推荐一些书和文章<br>《javascript高级程序设计》、《精通javascript》<br><a href=\"http://zora.ghost.io/tan-tan-bi-bao-yu-lambda/\" target=\"_blank\" rel=\"external\">「谈谈」：闭包与Lambda</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>&#8195;&#8195;javascript中的闭包一直是一个比较难理解的概念，建立在理解其的基础上应用更是一件难事。最近在看《精通javascript》，该书的作者之一是John Resig大神哦（安利一下这本书），书中对闭包的理解挺有意思，再结合之前看过的一些关于闭包的文章，在这里也来分享下我个人的理解。</p>\n<h3 id=\"说说闭包\"><a href=\"#说说闭包\" class=\"headerlink\" title=\"说说闭包\"></a>说说闭包</h3><p>在《js高程》中给闭包这样一个定义：有权访问另一个函数作用域的变量的函数，再看看《精通js》给的定义：内部函数在其父函数结束之后仍然能够访问其外围函数中的变量。总结一下这两个定义，闭包是一个函数可以访问其他函数的变量。在es5中作用域分为全局和函数两种，函数调用完成之后其作用域就会消失，其内部的变量也会被回收。而函数中如果存在另一个函数，情况就有些不同了，外部函数在执行完成之后作用域不会立即消失，而是会等到它内部的函数的调用结束，如果内部函数中还有其他函数，这个过程便会继续往下递归，直到所有内部存在的函数都调用结束。对于一些刚刚接触javascript的人来说可能不太容易理解，举一个例子吧：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">pureFunc</span>(<span class=\"params\">fn</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> caches = &#123;&#125;;</div><div class=\"line\">    <span class=\"keyword\">return</span> (<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">in</span>)</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> caches[<span class=\"keyword\">in</span>] || (caches[<span class=\"keyword\">in</span>] = fn(<span class=\"keyword\">in</span>));</div><div class=\"line\">    &#125;)</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">square</span>(<span class=\"params\">x</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> x * x;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> purSquare = pureFunc(square);</div></pre></td></tr></table></figure></p>\n<p>上面这段代码是很经典的纯函数制造器的实现，关于纯函数这里不展开讨论（感兴趣可以百度下）。缓存输出是纯函数的特性之一，square函数通过pureFunc生成了它的纯函数版本pureSquare。在pureFunc调用结束之后返回了它的内部匿名函数并赋值给pureSquare形成了一个闭包。在pureSquare的调用结束之前caches都可以被访问（调用一词不太准确，应该用调用栈，调用栈保存了函数所有的调用记录，调用栈结束函数的生命也就走到尽头，调用栈如何追踪调用又如何结束那又是另一篇文章了，这里就不展开了，不妨看一下《你不知道的javascript》）。对于闭包还有一种更简洁的定义：使用闭包创建的函数可以记住它被创建时所处的环境。</p>\n<h3 id=\"Curry化\"><a href=\"#Curry化\" class=\"headerlink\" title=\"Curry化\"></a>Curry化</h3><p>函数科里化是很实用的一种编程技巧，先上一段代码：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span>(<span class=\"params\"> num </span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">toAdd</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> num + toAdd</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> addFive = add( <span class=\"number\">5</span> );</div><div class=\"line\"><span class=\"comment\">//更普遍的写法是</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span> (<span class=\"params\"> a, b </span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> a + b;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> addFive = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> a </span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> add( a, <span class=\"number\">5</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>一个函数原本需要多个参数，通过固定其中一些参数生成需要更少参数的函数版本的过程被称为函数的科里化。科里化其实也是利用了函数闭包的特性，只是往往人们会忽略掉参数也是函数的属性这一特性（arguments）。</p>\n<h3 id=\"IIFE\"><a href=\"#IIFE\" class=\"headerlink\" title=\"IIFE\"></a>IIFE</h3><p>IIFE（立即执行函数表达式）的使用是十分频繁的，打开任意一个第三方库几乎都能看到他的身影：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">win</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> a = <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">x</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> a;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"built_in\">window</span>.x = x;</div><div class=\"line\">&#125;)(<span class=\"built_in\">window</span>)</div></pre></td></tr></table></figure></p>\n<p>上面的代码通过向window中赋值x实现了对象的导出，这是很多第三方库的做法，通过IIFE定义的变量不会污染全局，只存在于其内部的作用域中，通过导出变量的方式提供给外部访问。</p>\n<blockquote>\n<p>本文纯属抛砖引玉，或许在将来某一天我自己回来看的时候也会发现很多疏漏和错误下面推荐一些书和文章<br>《javascript高级程序设计》、《精通javascript》<br><a href=\"http://zora.ghost.io/tan-tan-bi-bao-yu-lambda/\" target=\"_blank\" rel=\"external\">「谈谈」：闭包与Lambda</a></p>\n</blockquote>\n"},{"title":"Vue源码解析--如何实现数据变化的监听","date":"2017-06-02T08:18:58.000Z","_content":"### 前言\n\n&#8195;&#8195;Vue实例属性data被定义为一个返回值必须为Object的函数，data初始化之后就不可以随意的增删属性。Vue中所有可以用来驱动视图的属性被设计为响应式的（本文主要讨论的是data中的属性），这些属性会被挂载一个Observer对象，Observer对象拥有强大的观察能力，reactive数据一旦发生变化就会被他捕捉然后通知视图做出响应。data便是最外层的被挂载了Observer的数据（也就是reactive化）。如果data中有Object或者Array属性，它们的子元素也会被reactive化，以此类推。我们都知道要想实现数据变化的监听一般都会使用到订阅发布模式（观察者模式），Vue中的数据变化监听也是订阅发布模式，一起看看源码吧。\n\n### Dep对象\n&#8195;&#8195;在Vue的订阅发布模式中，首先进入我们视野的是Dep对象（depend：依赖），它的角色类似消息中心。每个Dep实例拥有一个全局唯一的标志（id）和一个订阅栈（subs）。\n```js\n    //Dep实例可以拥有多条不的同订阅\n    //他维护一个订阅栈subs\n    var uid$1 = 0;\n    var Dep = function Dep () {\n        this.id = uid$1++;\n        this.subs = [];\n    };\n```\n&#8195;&#8195;addSub、removeSub方法用来管理subs栈\n```js\n    //添加订阅\n    Dep.prototype.addSub = function addSub (sub) {\n        this.subs.push(sub);\n    };\n\n    /*\n     *   remove$1(arr, item){\n     *       if(arr.length){\n     *           var index = arr.indexOf(item);\n     *           if(index > -1){\n     *               return arr.splice(index,1);\n     *           }\n     *       }\n     *   }\n     */\n    //移除订阅\n    Dep.prototype.removeSub = function removeSub (sub) {\n        remove$1(this.subs, sub);\n    };\n```\n&#8195;&#8195;depend方法中出现了一个target对象，根据上下文我发现它是一个watcher实例，watcher里也维护了一个类似subs的栈来管理dep（暂且叫他deps吧），调用这个方法的dep会被放入watcher的deps栈中。现在我们先不关心watcher到底是什么鬼，继续往下看。（看名字应该能猜得出来吧）\n```js\n    //添加追踪\n    Dep.prototype.depend = function depend () {\n        if (Dep.target) {\n            Dep.target.addDep(this);\n        }\n    };\n```\n&#8195;&#8195;再来看看target在Dep上的定义，它是Dep的类属性，并且通过一个全局的targetStack对其进行管理，很明显通过Dep访问target在任何时候都是一个唯一确定的。\n```js\n    //这里的target是一个watcher实例\n    Dep.target = null;\n    var targetStack = [];\n\n    function pushTarget (_target) {\n        if (Dep.target) { targetStack.push(Dep.target); }\n        Dep.target = _target;\n    }\n\n    function popTarget () {\n        Dep.target = targetStack.pop();\n    }\n```\n&#8195;&#8195;notify方法用来通知subs栈中的每一个订阅者数据变更\n```js\n    Dep.prototype.notify = function notify () {\n        //slice方法是最简单的数组拷贝（记住js中对象赋值是引用赋值）\n        var subs = this.subs.slice();\n        for (var i = 0, l = subs.length; i < l; i++) {\n            //每一个subs元素都是一个对象，所以subs[i] === this.subs[i]\n            //为什么不直接用this.subs[i].update()\n            //stablize the subscriber list first（这是作者给的注释）\n            subs[i].update();\n        }\n    };\n```\n### Observer对象\n&#8195;&#8195;Observer对象扮演观察者的角色，是这个模式中绝对的主角。创建Observer对象需要给一个value参数，value即是需要reactive化的数据。value被Observer包装之后会增加一个属性__ob__，它指向Observer本身（有点像隐式原型）。一个Observer对象包含3个属性：value自身的引用，dep实例，以及一个看起来好像是计数器的vmCount。value的值好像是没有什么要求的，如果value是一个数组那么就会执行一系列数组reactive化的方法。（这个稍后再来看，继续往下）\n```js\n    //把需要ob的data封装成一个Observer对象\n    var Observer = function Observer (value) {\n        this.value = value;\n        //ob.value可以访问到他的值\n        this.dep = new Dep();\n        this.vmCount = 0;\n        //当有根元素的时候才会给vmCount++\n        def(value, '__ob__', this);\n        //value.__ob__ = ob类似于__proto__的设计\n        //数组和其他类型的处理方式不同\n        if (Array.isArray(value)) {\n            //var hasProto = '__proto__' in {};\n            //由于__proto__并非标准属性，所以需要判断其是否可用\n            //__proto__指向隐式原型[[prototype]]\n            var augment = hasProto\n            ? protoAugment\n            : copyAugment;\n            //把value的数组方法替换成之前定义好的那些响应式方法\n            augment(value, arrayMethods, arrayKeys);\n            this.observeArray(value);\n        } else {\n            this.walk(value);\n        }\n    };\n```\n&#8195;&#8195;如果value不是数组就会执行下面这个walk方法，这里其实value就是被当成了object处理，如果不是，那么什么也不会发生，value中所有的属性都会被defineReactive$$1方法处理。\n```js\n    Observer.prototype.walk = function walk (obj) {\n        var keys = Object.keys(obj);\n        for (var i = 0; i < keys.length; i++) {\n            //把obj的普通属性转换成reactive属性（ob对象）\n            defineReactive$$1(obj, keys[i], obj[keys[i]]);\n        }\n    };\n```\n&#8195;&#8195;defineReactive$$1接收四个参数，这里只用到了前三个，第一个参数value，后面两个分别是value属性的键和值。具体来看这个方法，第一行怎么又特么new了一个dep，不同于Ob对象具有dep属性，像number，string这种基本属性由于不是对象所以挂载不了Ob，而这里的dep就是用来追踪基本属性的。实际上执行defineReactive$$1相当于创建了一个闭包，利用闭包的特性，每一个基本属性都能访问到一个唯一的dep。\n&#8195;&#8195;defineReactive$$1会尝试获取属性的set，get方法，一般得属性都是没有这两个方法的，除非有特别定义过，如果有get，set方法后面定义新的set，get会用到。\n&#8195;&#8195;var childOb = observe(val);又出现了一个方法observe，它的作用是reactive化传入的参数。当val是一个对象时（数组也是对象），val也会被reactive化并把挂载的ob返回回来。\n&#8195;&#8195;再然后就是给val属性设置get和set方法（如果你还不知道get，set方法的作用那就可以回去重修了），好像忽略了enumerable和configurable，这两个属性设置为true之后val就是可枚举可修改的了（默认的属性都是可枚举可修改的）。看看get方法的设置，每次获取val的值都会调用dep.depend往watcher中添加追踪，这里就有个疑问，每次都添加会不会重复添加很多dep，想想应该是不会的，前面有提到dep会有一个全局唯一的标志，添加的时候应该会判断一下（这里总感觉怪怪的，每次都添加会不会影响效率呢？），如果val是一个对象那就把reactive化之后的dep添加到watcher中。set方法中会调用dep.notify也就是我们想要的当属性发生变化时发出通知，dep中包含的订阅都会收到这个通知。如果set的属性是一个对象也会调用observe方法对它进行reactive化。\n```js\n        function defineReactive$$1 (\n        obj,\n        key,\n        val,\n        customSetter\n    ) {\n        \n        var dep = new Dep();\n\n        var property = Object.getOwnPropertyDescriptor(obj, key);\n        if (property && property.configurable === false) {\n            return\n        }\n\n        //没有特别定义过的对象都是没有默认的get和set方法的\n        var getter = property && property.get;\n        var setter = property && property.set;\n\n        //如果val是一个对象就会被包装成ob对象\n        var childOb = observe(val);\n        Object.defineProperty(obj, key, {\n            enumerable: true,\n            configurable: true,\n            get: function reactiveGetter () {\n                var value = getter ? getter.call(obj) : val;\n                //当Dep.target存在时把所有的依赖收集起来,调用watcher的addDep方法\n                //前面有提到target是一个watcher对象\n                if (Dep.target) {\n                    dep.depend();\n                    if (childOb) {\n                        childOb.dep.depend();\n                    }\n                    if (Array.isArray(value)) {\n                        dependArray(value);\n                    }\n                }\n                return value\n            },\n            set: function reactiveSetter (newVal) {\n                var value = getter ? getter.call(obj) : val;\n                //如果新的值和之前的值一样的话就不继续往下执行\n                if (newVal === value || (newVal !== newVal && value !== value)) {\n                    return\n                }\n                if (\"development\" !== 'production' && customSetter) {\n                    customSetter();\n                }\n                //如果有set方法调用set方法\n                if (setter) {\n                    setter.call(obj, newVal);\n                } else {\n                    val = newVal;\n                }\n                //设置的新值如果是个对象的话就调用observe把他变成ob对象\n                childOb = observe(newVal);\n                //通知变更\n                dep.notify();\n            }\n        });\n    }\n```\n&#8195;&#8195;从get、set方法中我们大致可以看出一些vue进行对象reactive化的规律，我们不能通过value.data = data来设置一个新的属性，因为这样不会触发set的reactive化，取而代之的是使用value = obj（新的对象），当然在value对象下的属性有声明的时候可以直接通过value.data = data来赋值。但是我们发现对于数组好像不是那么回事，数组元素中增加一个值并不会触发set方法也就不会收到通知，我们不可能每次都给数组全量替换进行赋值。\n```js\n    function observe (value, asRootData) {\n        if (!isObject(value)) {\n            return\n        }\n        var ob;\n        if (hasOwn(value, '__ob__') && value.__ob__ instanceof Observer) {\n            ob = value.__ob__;\n        } else if (\n            observerState.shouldConvert &&\n            !isServerRendering() &&\n            (Array.isArray(value) || isPlainObject(value)) &&\n            Object.isExtensible(value) &&\n            !value._isVue\n        ) {\n            ob = new Observer(value);\n        }\n        if (asRootData && ob) {\n            ob.vmCount++;\n        }\n        return ob\n    }\n```\n### 数组\n&#8195;&#8195;对于数组的reactive化会比对象的稍微复杂一些，因为数组元素的增加删除不会触发set方法。Vue中采用了封装数组方法的方式来捕捉数组元素的变化，首先收集到所有会对数组产生影响的方法，除了 [] = [1,2]（这种方法会触发set）,push、pop、shift、unshift、splice、sort、reverse。数组方法还有很多，例如：concat、slice、map等，但是这些方法不会在数组上直接进行操作，也不会对数组产生副作用。\n&#8195;&#8195;通过重写数组方法，在其中插入钩子，每次执行这些数组方法的时候都调用notify进行更新通知，且在有新数组插入是调用observeArray方法进行reactive化。\n```js\n    //arrayMethods继承自Array对象\n    var arrayProto = Array.prototype;\n    var arrayMethods = Object.create(arrayProto);\n    [\n        'push',\n        'pop',\n        'shift',\n        'unshift',\n        'splice',\n        'sort',\n        'reverse'\n    ].forEach(function (method) {\n        var original = arrayProto[method];\n        /*\n         *  function def (obj, key, val, enumerable) {\n         *     Object.defineProperty(obj, key, {\n         *          value: val,\n         *          enumerable: !!enumerable,\n         *          writable: true,\n         *          configurable: true\n         *      });\n         *  }\n         */\n        def(arrayMethods, method, function mutator () {\n            //把arguments赋值给arguments$1是为了提高速度\n            //作者给了原文链接http://jsperf.com/closure-with-arguments\n            //这里可以看到测试结果（长姿势）\n            var arguments$1 = arguments;\n            var i = arguments.length;\n            var args = new Array(i);\n            while (i--) {\n                args[i] = arguments$1[i];\n            }\n            //这句代码应该是为了保证重新定义过的方法保持不变\n            var result = original.apply(this, args);\n            var ob = this.__ob__;\n            var inserted;\n            //push，unshift，splice这三个方法会往数组中添加值\n            switch (method) {\n                case 'push':\n                    inserted = args;\n                    break\n                case 'unshift':\n                    inserted = args;\n                    break\n                case 'splice':\n                    inserted = args.slice(2);\n                    break\n            }\n            if (inserted) { ob.observeArray(inserted); }\n            ob.dep.notify();\n            return result\n        });\n    });\n```\n```js\n    var arrayKeys = Object.getOwnPropertyNames(arrayMethods);\n    \n    var observerState = {\n        shouldConvert: true,\n        isSettingProps: false\n    };\n\n    Observer.prototype.observeArray = function observeArray (items) {\n        for (var i = 0, l = items.length; i < l; i++) {\n            observe(items[i]);\n        }\n    };\n\n    function protoAugment (target, src) {\n        target.__proto__ = src;\n    }\n\n    function copyAugment (target, src, keys) {\n        for (var i = 0, l = keys.length; i < l; i++) {\n            var key = keys[i];\n            def(target, key, src[key]);\n        }\n    }\n\n    function dependArray (value) {\n        //e = (void 0) === e = undifined\n        for (var e = (void 0), i = 0, l = value.length; i < l; i++) {\n            e = value[i];\n            e && e.__ob__ && e.__ob__.dep.depend();\n            if (Array.isArray(e)) {\n                dependArray(e);\n            }\n        }\n    }\n```","source":"_posts/Vue源码解析--如何实现数据变化的监听.md","raw":"---\ntitle: Vue源码解析--如何实现数据变化的监听\ndate: 2017-06-02 16:18:58\ntags: 'javascript'\n---\n### 前言\n\n&#8195;&#8195;Vue实例属性data被定义为一个返回值必须为Object的函数，data初始化之后就不可以随意的增删属性。Vue中所有可以用来驱动视图的属性被设计为响应式的（本文主要讨论的是data中的属性），这些属性会被挂载一个Observer对象，Observer对象拥有强大的观察能力，reactive数据一旦发生变化就会被他捕捉然后通知视图做出响应。data便是最外层的被挂载了Observer的数据（也就是reactive化）。如果data中有Object或者Array属性，它们的子元素也会被reactive化，以此类推。我们都知道要想实现数据变化的监听一般都会使用到订阅发布模式（观察者模式），Vue中的数据变化监听也是订阅发布模式，一起看看源码吧。\n\n### Dep对象\n&#8195;&#8195;在Vue的订阅发布模式中，首先进入我们视野的是Dep对象（depend：依赖），它的角色类似消息中心。每个Dep实例拥有一个全局唯一的标志（id）和一个订阅栈（subs）。\n```js\n    //Dep实例可以拥有多条不的同订阅\n    //他维护一个订阅栈subs\n    var uid$1 = 0;\n    var Dep = function Dep () {\n        this.id = uid$1++;\n        this.subs = [];\n    };\n```\n&#8195;&#8195;addSub、removeSub方法用来管理subs栈\n```js\n    //添加订阅\n    Dep.prototype.addSub = function addSub (sub) {\n        this.subs.push(sub);\n    };\n\n    /*\n     *   remove$1(arr, item){\n     *       if(arr.length){\n     *           var index = arr.indexOf(item);\n     *           if(index > -1){\n     *               return arr.splice(index,1);\n     *           }\n     *       }\n     *   }\n     */\n    //移除订阅\n    Dep.prototype.removeSub = function removeSub (sub) {\n        remove$1(this.subs, sub);\n    };\n```\n&#8195;&#8195;depend方法中出现了一个target对象，根据上下文我发现它是一个watcher实例，watcher里也维护了一个类似subs的栈来管理dep（暂且叫他deps吧），调用这个方法的dep会被放入watcher的deps栈中。现在我们先不关心watcher到底是什么鬼，继续往下看。（看名字应该能猜得出来吧）\n```js\n    //添加追踪\n    Dep.prototype.depend = function depend () {\n        if (Dep.target) {\n            Dep.target.addDep(this);\n        }\n    };\n```\n&#8195;&#8195;再来看看target在Dep上的定义，它是Dep的类属性，并且通过一个全局的targetStack对其进行管理，很明显通过Dep访问target在任何时候都是一个唯一确定的。\n```js\n    //这里的target是一个watcher实例\n    Dep.target = null;\n    var targetStack = [];\n\n    function pushTarget (_target) {\n        if (Dep.target) { targetStack.push(Dep.target); }\n        Dep.target = _target;\n    }\n\n    function popTarget () {\n        Dep.target = targetStack.pop();\n    }\n```\n&#8195;&#8195;notify方法用来通知subs栈中的每一个订阅者数据变更\n```js\n    Dep.prototype.notify = function notify () {\n        //slice方法是最简单的数组拷贝（记住js中对象赋值是引用赋值）\n        var subs = this.subs.slice();\n        for (var i = 0, l = subs.length; i < l; i++) {\n            //每一个subs元素都是一个对象，所以subs[i] === this.subs[i]\n            //为什么不直接用this.subs[i].update()\n            //stablize the subscriber list first（这是作者给的注释）\n            subs[i].update();\n        }\n    };\n```\n### Observer对象\n&#8195;&#8195;Observer对象扮演观察者的角色，是这个模式中绝对的主角。创建Observer对象需要给一个value参数，value即是需要reactive化的数据。value被Observer包装之后会增加一个属性__ob__，它指向Observer本身（有点像隐式原型）。一个Observer对象包含3个属性：value自身的引用，dep实例，以及一个看起来好像是计数器的vmCount。value的值好像是没有什么要求的，如果value是一个数组那么就会执行一系列数组reactive化的方法。（这个稍后再来看，继续往下）\n```js\n    //把需要ob的data封装成一个Observer对象\n    var Observer = function Observer (value) {\n        this.value = value;\n        //ob.value可以访问到他的值\n        this.dep = new Dep();\n        this.vmCount = 0;\n        //当有根元素的时候才会给vmCount++\n        def(value, '__ob__', this);\n        //value.__ob__ = ob类似于__proto__的设计\n        //数组和其他类型的处理方式不同\n        if (Array.isArray(value)) {\n            //var hasProto = '__proto__' in {};\n            //由于__proto__并非标准属性，所以需要判断其是否可用\n            //__proto__指向隐式原型[[prototype]]\n            var augment = hasProto\n            ? protoAugment\n            : copyAugment;\n            //把value的数组方法替换成之前定义好的那些响应式方法\n            augment(value, arrayMethods, arrayKeys);\n            this.observeArray(value);\n        } else {\n            this.walk(value);\n        }\n    };\n```\n&#8195;&#8195;如果value不是数组就会执行下面这个walk方法，这里其实value就是被当成了object处理，如果不是，那么什么也不会发生，value中所有的属性都会被defineReactive$$1方法处理。\n```js\n    Observer.prototype.walk = function walk (obj) {\n        var keys = Object.keys(obj);\n        for (var i = 0; i < keys.length; i++) {\n            //把obj的普通属性转换成reactive属性（ob对象）\n            defineReactive$$1(obj, keys[i], obj[keys[i]]);\n        }\n    };\n```\n&#8195;&#8195;defineReactive$$1接收四个参数，这里只用到了前三个，第一个参数value，后面两个分别是value属性的键和值。具体来看这个方法，第一行怎么又特么new了一个dep，不同于Ob对象具有dep属性，像number，string这种基本属性由于不是对象所以挂载不了Ob，而这里的dep就是用来追踪基本属性的。实际上执行defineReactive$$1相当于创建了一个闭包，利用闭包的特性，每一个基本属性都能访问到一个唯一的dep。\n&#8195;&#8195;defineReactive$$1会尝试获取属性的set，get方法，一般得属性都是没有这两个方法的，除非有特别定义过，如果有get，set方法后面定义新的set，get会用到。\n&#8195;&#8195;var childOb = observe(val);又出现了一个方法observe，它的作用是reactive化传入的参数。当val是一个对象时（数组也是对象），val也会被reactive化并把挂载的ob返回回来。\n&#8195;&#8195;再然后就是给val属性设置get和set方法（如果你还不知道get，set方法的作用那就可以回去重修了），好像忽略了enumerable和configurable，这两个属性设置为true之后val就是可枚举可修改的了（默认的属性都是可枚举可修改的）。看看get方法的设置，每次获取val的值都会调用dep.depend往watcher中添加追踪，这里就有个疑问，每次都添加会不会重复添加很多dep，想想应该是不会的，前面有提到dep会有一个全局唯一的标志，添加的时候应该会判断一下（这里总感觉怪怪的，每次都添加会不会影响效率呢？），如果val是一个对象那就把reactive化之后的dep添加到watcher中。set方法中会调用dep.notify也就是我们想要的当属性发生变化时发出通知，dep中包含的订阅都会收到这个通知。如果set的属性是一个对象也会调用observe方法对它进行reactive化。\n```js\n        function defineReactive$$1 (\n        obj,\n        key,\n        val,\n        customSetter\n    ) {\n        \n        var dep = new Dep();\n\n        var property = Object.getOwnPropertyDescriptor(obj, key);\n        if (property && property.configurable === false) {\n            return\n        }\n\n        //没有特别定义过的对象都是没有默认的get和set方法的\n        var getter = property && property.get;\n        var setter = property && property.set;\n\n        //如果val是一个对象就会被包装成ob对象\n        var childOb = observe(val);\n        Object.defineProperty(obj, key, {\n            enumerable: true,\n            configurable: true,\n            get: function reactiveGetter () {\n                var value = getter ? getter.call(obj) : val;\n                //当Dep.target存在时把所有的依赖收集起来,调用watcher的addDep方法\n                //前面有提到target是一个watcher对象\n                if (Dep.target) {\n                    dep.depend();\n                    if (childOb) {\n                        childOb.dep.depend();\n                    }\n                    if (Array.isArray(value)) {\n                        dependArray(value);\n                    }\n                }\n                return value\n            },\n            set: function reactiveSetter (newVal) {\n                var value = getter ? getter.call(obj) : val;\n                //如果新的值和之前的值一样的话就不继续往下执行\n                if (newVal === value || (newVal !== newVal && value !== value)) {\n                    return\n                }\n                if (\"development\" !== 'production' && customSetter) {\n                    customSetter();\n                }\n                //如果有set方法调用set方法\n                if (setter) {\n                    setter.call(obj, newVal);\n                } else {\n                    val = newVal;\n                }\n                //设置的新值如果是个对象的话就调用observe把他变成ob对象\n                childOb = observe(newVal);\n                //通知变更\n                dep.notify();\n            }\n        });\n    }\n```\n&#8195;&#8195;从get、set方法中我们大致可以看出一些vue进行对象reactive化的规律，我们不能通过value.data = data来设置一个新的属性，因为这样不会触发set的reactive化，取而代之的是使用value = obj（新的对象），当然在value对象下的属性有声明的时候可以直接通过value.data = data来赋值。但是我们发现对于数组好像不是那么回事，数组元素中增加一个值并不会触发set方法也就不会收到通知，我们不可能每次都给数组全量替换进行赋值。\n```js\n    function observe (value, asRootData) {\n        if (!isObject(value)) {\n            return\n        }\n        var ob;\n        if (hasOwn(value, '__ob__') && value.__ob__ instanceof Observer) {\n            ob = value.__ob__;\n        } else if (\n            observerState.shouldConvert &&\n            !isServerRendering() &&\n            (Array.isArray(value) || isPlainObject(value)) &&\n            Object.isExtensible(value) &&\n            !value._isVue\n        ) {\n            ob = new Observer(value);\n        }\n        if (asRootData && ob) {\n            ob.vmCount++;\n        }\n        return ob\n    }\n```\n### 数组\n&#8195;&#8195;对于数组的reactive化会比对象的稍微复杂一些，因为数组元素的增加删除不会触发set方法。Vue中采用了封装数组方法的方式来捕捉数组元素的变化，首先收集到所有会对数组产生影响的方法，除了 [] = [1,2]（这种方法会触发set）,push、pop、shift、unshift、splice、sort、reverse。数组方法还有很多，例如：concat、slice、map等，但是这些方法不会在数组上直接进行操作，也不会对数组产生副作用。\n&#8195;&#8195;通过重写数组方法，在其中插入钩子，每次执行这些数组方法的时候都调用notify进行更新通知，且在有新数组插入是调用observeArray方法进行reactive化。\n```js\n    //arrayMethods继承自Array对象\n    var arrayProto = Array.prototype;\n    var arrayMethods = Object.create(arrayProto);\n    [\n        'push',\n        'pop',\n        'shift',\n        'unshift',\n        'splice',\n        'sort',\n        'reverse'\n    ].forEach(function (method) {\n        var original = arrayProto[method];\n        /*\n         *  function def (obj, key, val, enumerable) {\n         *     Object.defineProperty(obj, key, {\n         *          value: val,\n         *          enumerable: !!enumerable,\n         *          writable: true,\n         *          configurable: true\n         *      });\n         *  }\n         */\n        def(arrayMethods, method, function mutator () {\n            //把arguments赋值给arguments$1是为了提高速度\n            //作者给了原文链接http://jsperf.com/closure-with-arguments\n            //这里可以看到测试结果（长姿势）\n            var arguments$1 = arguments;\n            var i = arguments.length;\n            var args = new Array(i);\n            while (i--) {\n                args[i] = arguments$1[i];\n            }\n            //这句代码应该是为了保证重新定义过的方法保持不变\n            var result = original.apply(this, args);\n            var ob = this.__ob__;\n            var inserted;\n            //push，unshift，splice这三个方法会往数组中添加值\n            switch (method) {\n                case 'push':\n                    inserted = args;\n                    break\n                case 'unshift':\n                    inserted = args;\n                    break\n                case 'splice':\n                    inserted = args.slice(2);\n                    break\n            }\n            if (inserted) { ob.observeArray(inserted); }\n            ob.dep.notify();\n            return result\n        });\n    });\n```\n```js\n    var arrayKeys = Object.getOwnPropertyNames(arrayMethods);\n    \n    var observerState = {\n        shouldConvert: true,\n        isSettingProps: false\n    };\n\n    Observer.prototype.observeArray = function observeArray (items) {\n        for (var i = 0, l = items.length; i < l; i++) {\n            observe(items[i]);\n        }\n    };\n\n    function protoAugment (target, src) {\n        target.__proto__ = src;\n    }\n\n    function copyAugment (target, src, keys) {\n        for (var i = 0, l = keys.length; i < l; i++) {\n            var key = keys[i];\n            def(target, key, src[key]);\n        }\n    }\n\n    function dependArray (value) {\n        //e = (void 0) === e = undifined\n        for (var e = (void 0), i = 0, l = value.length; i < l; i++) {\n            e = value[i];\n            e && e.__ob__ && e.__ob__.dep.depend();\n            if (Array.isArray(e)) {\n                dependArray(e);\n            }\n        }\n    }\n```","slug":"Vue源码解析--如何实现数据变化的监听","published":1,"updated":"2017-12-01T01:22:41.405Z","_id":"cjabu1rhm0006hktpek42axoz","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>&#8195;&#8195;Vue实例属性data被定义为一个返回值必须为Object的函数，data初始化之后就不可以随意的增删属性。Vue中所有可以用来驱动视图的属性被设计为响应式的（本文主要讨论的是data中的属性），这些属性会被挂载一个Observer对象，Observer对象拥有强大的观察能力，reactive数据一旦发生变化就会被他捕捉然后通知视图做出响应。data便是最外层的被挂载了Observer的数据（也就是reactive化）。如果data中有Object或者Array属性，它们的子元素也会被reactive化，以此类推。我们都知道要想实现数据变化的监听一般都会使用到订阅发布模式（观察者模式），Vue中的数据变化监听也是订阅发布模式，一起看看源码吧。</p>\n<h3 id=\"Dep对象\"><a href=\"#Dep对象\" class=\"headerlink\" title=\"Dep对象\"></a>Dep对象</h3><p>&#8195;&#8195;在Vue的订阅发布模式中，首先进入我们视野的是Dep对象（depend：依赖），它的角色类似消息中心。每个Dep实例拥有一个全局唯一的标志（id）和一个订阅栈（subs）。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//Dep实例可以拥有多条不的同订阅</span></div><div class=\"line\"><span class=\"comment\">//他维护一个订阅栈subs</span></div><div class=\"line\"><span class=\"keyword\">var</span> uid$<span class=\"number\">1</span> = <span class=\"number\">0</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> Dep = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Dep</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.id = uid$<span class=\"number\">1</span>++;</div><div class=\"line\">    <span class=\"keyword\">this</span>.subs = [];</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p>&#8195;&#8195;addSub、removeSub方法用来管理subs栈<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//添加订阅</span></div><div class=\"line\">Dep.prototype.addSub = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">addSub</span> (<span class=\"params\">sub</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.subs.push(sub);</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/*</span></div><div class=\"line\"> *   remove$1(arr, item)&#123;</div><div class=\"line\"> *       if(arr.length)&#123;</div><div class=\"line\"> *           var index = arr.indexOf(item);</div><div class=\"line\"> *           if(index &gt; -1)&#123;</div><div class=\"line\"> *               return arr.splice(index,1);</div><div class=\"line\"> *           &#125;</div><div class=\"line\"> *       &#125;</div><div class=\"line\"> *   &#125;</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"comment\">//移除订阅</span></div><div class=\"line\">Dep.prototype.removeSub = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">removeSub</span> (<span class=\"params\">sub</span>) </span>&#123;</div><div class=\"line\">    remove$<span class=\"number\">1</span>(<span class=\"keyword\">this</span>.subs, sub);</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p>&#8195;&#8195;depend方法中出现了一个target对象，根据上下文我发现它是一个watcher实例，watcher里也维护了一个类似subs的栈来管理dep（暂且叫他deps吧），调用这个方法的dep会被放入watcher的deps栈中。现在我们先不关心watcher到底是什么鬼，继续往下看。（看名字应该能猜得出来吧）<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//添加追踪</span></div><div class=\"line\">Dep.prototype.depend = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">depend</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (Dep.target) &#123;</div><div class=\"line\">        Dep.target.addDep(<span class=\"keyword\">this</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p>&#8195;&#8195;再来看看target在Dep上的定义，它是Dep的类属性，并且通过一个全局的targetStack对其进行管理，很明显通过Dep访问target在任何时候都是一个唯一确定的。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//这里的target是一个watcher实例</span></div><div class=\"line\">Dep.target = <span class=\"literal\">null</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> targetStack = [];</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">pushTarget</span> (<span class=\"params\">_target</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (Dep.target) &#123; targetStack.push(Dep.target); &#125;</div><div class=\"line\">    Dep.target = _target;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">popTarget</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    Dep.target = targetStack.pop();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>&#8195;&#8195;notify方法用来通知subs栈中的每一个订阅者数据变更<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">Dep.prototype.notify = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">notify</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">//slice方法是最简单的数组拷贝（记住js中对象赋值是引用赋值）</span></div><div class=\"line\">    <span class=\"keyword\">var</span> subs = <span class=\"keyword\">this</span>.subs.slice();</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>, l = subs.length; i &lt; l; i++) &#123;</div><div class=\"line\">        <span class=\"comment\">//每一个subs元素都是一个对象，所以subs[i] === this.subs[i]</span></div><div class=\"line\">        <span class=\"comment\">//为什么不直接用this.subs[i].update()</span></div><div class=\"line\">        <span class=\"comment\">//stablize the subscriber list first（这是作者给的注释）</span></div><div class=\"line\">        subs[i].update();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<h3 id=\"Observer对象\"><a href=\"#Observer对象\" class=\"headerlink\" title=\"Observer对象\"></a>Observer对象</h3><p>&#8195;&#8195;Observer对象扮演观察者的角色，是这个模式中绝对的主角。创建Observer对象需要给一个value参数，value即是需要reactive化的数据。value被Observer包装之后会增加一个属性<strong>ob</strong>，它指向Observer本身（有点像隐式原型）。一个Observer对象包含3个属性：value自身的引用，dep实例，以及一个看起来好像是计数器的vmCount。value的值好像是没有什么要求的，如果value是一个数组那么就会执行一系列数组reactive化的方法。（这个稍后再来看，继续往下）<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//把需要ob的data封装成一个Observer对象</span></div><div class=\"line\"><span class=\"keyword\">var</span> Observer = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Observer</span> (<span class=\"params\">value</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.value = value;</div><div class=\"line\">    <span class=\"comment\">//ob.value可以访问到他的值</span></div><div class=\"line\">    <span class=\"keyword\">this</span>.dep = <span class=\"keyword\">new</span> Dep();</div><div class=\"line\">    <span class=\"keyword\">this</span>.vmCount = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"comment\">//当有根元素的时候才会给vmCount++</span></div><div class=\"line\">    def(value, <span class=\"string\">'__ob__'</span>, <span class=\"keyword\">this</span>);</div><div class=\"line\">    <span class=\"comment\">//value.__ob__ = ob类似于__proto__的设计</span></div><div class=\"line\">    <span class=\"comment\">//数组和其他类型的处理方式不同</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">Array</span>.isArray(value)) &#123;</div><div class=\"line\">        <span class=\"comment\">//var hasProto = '__proto__' in &#123;&#125;;</span></div><div class=\"line\">        <span class=\"comment\">//由于__proto__并非标准属性，所以需要判断其是否可用</span></div><div class=\"line\">        <span class=\"comment\">//__proto__指向隐式原型[[prototype]]</span></div><div class=\"line\">        <span class=\"keyword\">var</span> augment = hasProto</div><div class=\"line\">        ? protoAugment</div><div class=\"line\">        : copyAugment;</div><div class=\"line\">        <span class=\"comment\">//把value的数组方法替换成之前定义好的那些响应式方法</span></div><div class=\"line\">        augment(value, arrayMethods, arrayKeys);</div><div class=\"line\">        <span class=\"keyword\">this</span>.observeArray(value);</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.walk(value);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p>&#8195;&#8195;如果value不是数组就会执行下面这个walk方法，这里其实value就是被当成了object处理，如果不是，那么什么也不会发生，value中所有的属性都会被defineReactive$$1方法处理。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">Observer.prototype.walk = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">walk</span> (<span class=\"params\">obj</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> keys = <span class=\"built_in\">Object</span>.keys(obj);</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; keys.length; i++) &#123;</div><div class=\"line\">        <span class=\"comment\">//把obj的普通属性转换成reactive属性（ob对象）</span></div><div class=\"line\">        defineReactive$$<span class=\"number\">1</span>(obj, keys[i], obj[keys[i]]);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p>&#8195;&#8195;defineReactive$$1接收四个参数，这里只用到了前三个，第一个参数value，后面两个分别是value属性的键和值。具体来看这个方法，第一行怎么又特么new了一个dep，不同于Ob对象具有dep属性，像number，string这种基本属性由于不是对象所以挂载不了Ob，而这里的dep就是用来追踪基本属性的。实际上执行defineReactive$$1相当于创建了一个闭包，利用闭包的特性，每一个基本属性都能访问到一个唯一的dep。<br>&#8195;&#8195;defineReactive$$1会尝试获取属性的set，get方法，一般得属性都是没有这两个方法的，除非有特别定义过，如果有get，set方法后面定义新的set，get会用到。<br>&#8195;&#8195;var childOb = observe(val);又出现了一个方法observe，它的作用是reactive化传入的参数。当val是一个对象时（数组也是对象），val也会被reactive化并把挂载的ob返回回来。<br>&#8195;&#8195;再然后就是给val属性设置get和set方法（如果你还不知道get，set方法的作用那就可以回去重修了），好像忽略了enumerable和configurable，这两个属性设置为true之后val就是可枚举可修改的了（默认的属性都是可枚举可修改的）。看看get方法的设置，每次获取val的值都会调用dep.depend往watcher中添加追踪，这里就有个疑问，每次都添加会不会重复添加很多dep，想想应该是不会的，前面有提到dep会有一个全局唯一的标志，添加的时候应该会判断一下（这里总感觉怪怪的，每次都添加会不会影响效率呢？），如果val是一个对象那就把reactive化之后的dep添加到watcher中。set方法中会调用dep.notify也就是我们想要的当属性发生变化时发出通知，dep中包含的订阅都会收到这个通知。如果set的属性是一个对象也会调用observe方法对它进行reactive化。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div></pre></td><td class=\"code\"><pre><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">defineReactive$$1</span> (<span class=\"params\"></span></span></div><div class=\"line\">    obj,</div><div class=\"line\">    key,</div><div class=\"line\">    val,</div><div class=\"line\">    customSetter</div><div class=\"line\">) &#123;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">var</span> dep = <span class=\"keyword\">new</span> Dep();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">var</span> property = <span class=\"built_in\">Object</span>.getOwnPropertyDescriptor(obj, key);</div><div class=\"line\">    <span class=\"keyword\">if</span> (property &amp;&amp; property.configurable === <span class=\"literal\">false</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//没有特别定义过的对象都是没有默认的get和set方法的</span></div><div class=\"line\">    <span class=\"keyword\">var</span> getter = property &amp;&amp; property.get;</div><div class=\"line\">    <span class=\"keyword\">var</span> setter = property &amp;&amp; property.set;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//如果val是一个对象就会被包装成ob对象</span></div><div class=\"line\">    <span class=\"keyword\">var</span> childOb = observe(val);</div><div class=\"line\">    <span class=\"built_in\">Object</span>.defineProperty(obj, key, &#123;</div><div class=\"line\">        <span class=\"attr\">enumerable</span>: <span class=\"literal\">true</span>,</div><div class=\"line\">        <span class=\"attr\">configurable</span>: <span class=\"literal\">true</span>,</div><div class=\"line\">        <span class=\"attr\">get</span>: <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">reactiveGetter</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">var</span> value = getter ? getter.call(obj) : val;</div><div class=\"line\">            <span class=\"comment\">//当Dep.target存在时把所有的依赖收集起来,调用watcher的addDep方法</span></div><div class=\"line\">            <span class=\"comment\">//前面有提到target是一个watcher对象</span></div><div class=\"line\">            <span class=\"keyword\">if</span> (Dep.target) &#123;</div><div class=\"line\">                dep.depend();</div><div class=\"line\">                <span class=\"keyword\">if</span> (childOb) &#123;</div><div class=\"line\">                    childOb.dep.depend();</div><div class=\"line\">                &#125;</div><div class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"built_in\">Array</span>.isArray(value)) &#123;</div><div class=\"line\">                    dependArray(value);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">return</span> value</div><div class=\"line\">        &#125;,</div><div class=\"line\">        <span class=\"attr\">set</span>: <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">reactiveSetter</span> (<span class=\"params\">newVal</span>) </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">var</span> value = getter ? getter.call(obj) : val;</div><div class=\"line\">            <span class=\"comment\">//如果新的值和之前的值一样的话就不继续往下执行</span></div><div class=\"line\">            <span class=\"keyword\">if</span> (newVal === value || (newVal !== newVal &amp;&amp; value !== value)) &#123;</div><div class=\"line\">                <span class=\"keyword\">return</span></div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"string\">\"development\"</span> !== <span class=\"string\">'production'</span> &amp;&amp; customSetter) &#123;</div><div class=\"line\">                customSetter();</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"comment\">//如果有set方法调用set方法</span></div><div class=\"line\">            <span class=\"keyword\">if</span> (setter) &#123;</div><div class=\"line\">                setter.call(obj, newVal);</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                val = newVal;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"comment\">//设置的新值如果是个对象的话就调用observe把他变成ob对象</span></div><div class=\"line\">            childOb = observe(newVal);</div><div class=\"line\">            <span class=\"comment\">//通知变更</span></div><div class=\"line\">            dep.notify();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>&#8195;&#8195;从get、set方法中我们大致可以看出一些vue进行对象reactive化的规律，我们不能通过value.data = data来设置一个新的属性，因为这样不会触发set的reactive化，取而代之的是使用value = obj（新的对象），当然在value对象下的属性有声明的时候可以直接通过value.data = data来赋值。但是我们发现对于数组好像不是那么回事，数组元素中增加一个值并不会触发set方法也就不会收到通知，我们不可能每次都给数组全量替换进行赋值。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">observe</span> (<span class=\"params\">value, asRootData</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (!isObject(value)) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">var</span> ob;</div><div class=\"line\">    <span class=\"keyword\">if</span> (hasOwn(value, <span class=\"string\">'__ob__'</span>) &amp;&amp; value.__ob__ <span class=\"keyword\">instanceof</span> Observer) &#123;</div><div class=\"line\">        ob = value.__ob__;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (</div><div class=\"line\">        observerState.shouldConvert &amp;&amp;</div><div class=\"line\">        !isServerRendering() &amp;&amp;</div><div class=\"line\">        (<span class=\"built_in\">Array</span>.isArray(value) || isPlainObject(value)) &amp;&amp;</div><div class=\"line\">        <span class=\"built_in\">Object</span>.isExtensible(value) &amp;&amp;</div><div class=\"line\">        !value._isVue</div><div class=\"line\">    ) &#123;</div><div class=\"line\">        ob = <span class=\"keyword\">new</span> Observer(value);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span> (asRootData &amp;&amp; ob) &#123;</div><div class=\"line\">        ob.vmCount++;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> ob</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"数组\"><a href=\"#数组\" class=\"headerlink\" title=\"数组\"></a>数组</h3><p>&#8195;&#8195;对于数组的reactive化会比对象的稍微复杂一些，因为数组元素的增加删除不会触发set方法。Vue中采用了封装数组方法的方式来捕捉数组元素的变化，首先收集到所有会对数组产生影响的方法，除了 [] = [1,2]（这种方法会触发set）,push、pop、shift、unshift、splice、sort、reverse。数组方法还有很多，例如：concat、slice、map等，但是这些方法不会在数组上直接进行操作，也不会对数组产生副作用。<br>&#8195;&#8195;通过重写数组方法，在其中插入钩子，每次执行这些数组方法的时候都调用notify进行更新通知，且在有新数组插入是调用observeArray方法进行reactive化。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//arrayMethods继承自Array对象</span></div><div class=\"line\"><span class=\"keyword\">var</span> arrayProto = <span class=\"built_in\">Array</span>.prototype;</div><div class=\"line\"><span class=\"keyword\">var</span> arrayMethods = <span class=\"built_in\">Object</span>.create(arrayProto);</div><div class=\"line\">[</div><div class=\"line\">    <span class=\"string\">'push'</span>,</div><div class=\"line\">    <span class=\"string\">'pop'</span>,</div><div class=\"line\">    <span class=\"string\">'shift'</span>,</div><div class=\"line\">    <span class=\"string\">'unshift'</span>,</div><div class=\"line\">    <span class=\"string\">'splice'</span>,</div><div class=\"line\">    <span class=\"string\">'sort'</span>,</div><div class=\"line\">    <span class=\"string\">'reverse'</span></div><div class=\"line\">].forEach(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">method</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> original = arrayProto[method];</div><div class=\"line\">    <span class=\"comment\">/*</span></div><div class=\"line\">     *  function def (obj, key, val, enumerable) &#123;</div><div class=\"line\">     *     Object.defineProperty(obj, key, &#123;</div><div class=\"line\">     *          value: val,</div><div class=\"line\">     *          enumerable: !!enumerable,</div><div class=\"line\">     *          writable: true,</div><div class=\"line\">     *          configurable: true</div><div class=\"line\">     *      &#125;);</div><div class=\"line\">     *  &#125;</div><div class=\"line\">     */</div><div class=\"line\">    def(arrayMethods, method, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">mutator</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"comment\">//把arguments赋值给arguments$1是为了提高速度</span></div><div class=\"line\">        <span class=\"comment\">//作者给了原文链接http://jsperf.com/closure-with-arguments</span></div><div class=\"line\">        <span class=\"comment\">//这里可以看到测试结果（长姿势）</span></div><div class=\"line\">        <span class=\"keyword\">var</span> <span class=\"built_in\">arguments</span>$<span class=\"number\">1</span> = <span class=\"built_in\">arguments</span>;</div><div class=\"line\">        <span class=\"keyword\">var</span> i = <span class=\"built_in\">arguments</span>.length;</div><div class=\"line\">        <span class=\"keyword\">var</span> args = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(i);</div><div class=\"line\">        <span class=\"keyword\">while</span> (i--) &#123;</div><div class=\"line\">            args[i] = <span class=\"built_in\">arguments</span>$<span class=\"number\">1</span>[i];</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"comment\">//这句代码应该是为了保证重新定义过的方法保持不变</span></div><div class=\"line\">        <span class=\"keyword\">var</span> result = original.apply(<span class=\"keyword\">this</span>, args);</div><div class=\"line\">        <span class=\"keyword\">var</span> ob = <span class=\"keyword\">this</span>.__ob__;</div><div class=\"line\">        <span class=\"keyword\">var</span> inserted;</div><div class=\"line\">        <span class=\"comment\">//push，unshift，splice这三个方法会往数组中添加值</span></div><div class=\"line\">        <span class=\"keyword\">switch</span> (method) &#123;</div><div class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">'push'</span>:</div><div class=\"line\">                inserted = args;</div><div class=\"line\">                <span class=\"keyword\">break</span></div><div class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">'unshift'</span>:</div><div class=\"line\">                inserted = args;</div><div class=\"line\">                <span class=\"keyword\">break</span></div><div class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">'splice'</span>:</div><div class=\"line\">                inserted = args.slice(<span class=\"number\">2</span>);</div><div class=\"line\">                <span class=\"keyword\">break</span></div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">if</span> (inserted) &#123; ob.observeArray(inserted); &#125;</div><div class=\"line\">        ob.dep.notify();</div><div class=\"line\">        <span class=\"keyword\">return</span> result</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> arrayKeys = <span class=\"built_in\">Object</span>.getOwnPropertyNames(arrayMethods);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> observerState = &#123;</div><div class=\"line\">    <span class=\"attr\">shouldConvert</span>: <span class=\"literal\">true</span>,</div><div class=\"line\">    <span class=\"attr\">isSettingProps</span>: <span class=\"literal\">false</span></div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">Observer.prototype.observeArray = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">observeArray</span> (<span class=\"params\">items</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>, l = items.length; i &lt; l; i++) &#123;</div><div class=\"line\">        observe(items[i]);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">protoAugment</span> (<span class=\"params\">target, src</span>) </span>&#123;</div><div class=\"line\">    target.__proto__ = src;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">copyAugment</span> (<span class=\"params\">target, src, keys</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>, l = keys.length; i &lt; l; i++) &#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> key = keys[i];</div><div class=\"line\">        def(target, key, src[key]);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">dependArray</span> (<span class=\"params\">value</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">//e = (void 0) === e = undifined</span></div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> e = (<span class=\"keyword\">void</span> <span class=\"number\">0</span>), i = <span class=\"number\">0</span>, l = value.length; i &lt; l; i++) &#123;</div><div class=\"line\">        e = value[i];</div><div class=\"line\">        e &amp;&amp; e.__ob__ &amp;&amp; e.__ob__.dep.depend();</div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">Array</span>.isArray(e)) &#123;</div><div class=\"line\">            dependArray(e);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>&#8195;&#8195;Vue实例属性data被定义为一个返回值必须为Object的函数，data初始化之后就不可以随意的增删属性。Vue中所有可以用来驱动视图的属性被设计为响应式的（本文主要讨论的是data中的属性），这些属性会被挂载一个Observer对象，Observer对象拥有强大的观察能力，reactive数据一旦发生变化就会被他捕捉然后通知视图做出响应。data便是最外层的被挂载了Observer的数据（也就是reactive化）。如果data中有Object或者Array属性，它们的子元素也会被reactive化，以此类推。我们都知道要想实现数据变化的监听一般都会使用到订阅发布模式（观察者模式），Vue中的数据变化监听也是订阅发布模式，一起看看源码吧。</p>\n<h3 id=\"Dep对象\"><a href=\"#Dep对象\" class=\"headerlink\" title=\"Dep对象\"></a>Dep对象</h3><p>&#8195;&#8195;在Vue的订阅发布模式中，首先进入我们视野的是Dep对象（depend：依赖），它的角色类似消息中心。每个Dep实例拥有一个全局唯一的标志（id）和一个订阅栈（subs）。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//Dep实例可以拥有多条不的同订阅</span></div><div class=\"line\"><span class=\"comment\">//他维护一个订阅栈subs</span></div><div class=\"line\"><span class=\"keyword\">var</span> uid$<span class=\"number\">1</span> = <span class=\"number\">0</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> Dep = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Dep</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.id = uid$<span class=\"number\">1</span>++;</div><div class=\"line\">    <span class=\"keyword\">this</span>.subs = [];</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p>&#8195;&#8195;addSub、removeSub方法用来管理subs栈<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//添加订阅</span></div><div class=\"line\">Dep.prototype.addSub = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">addSub</span> (<span class=\"params\">sub</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.subs.push(sub);</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/*</span></div><div class=\"line\"> *   remove$1(arr, item)&#123;</div><div class=\"line\"> *       if(arr.length)&#123;</div><div class=\"line\"> *           var index = arr.indexOf(item);</div><div class=\"line\"> *           if(index &gt; -1)&#123;</div><div class=\"line\"> *               return arr.splice(index,1);</div><div class=\"line\"> *           &#125;</div><div class=\"line\"> *       &#125;</div><div class=\"line\"> *   &#125;</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"comment\">//移除订阅</span></div><div class=\"line\">Dep.prototype.removeSub = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">removeSub</span> (<span class=\"params\">sub</span>) </span>&#123;</div><div class=\"line\">    remove$<span class=\"number\">1</span>(<span class=\"keyword\">this</span>.subs, sub);</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p>&#8195;&#8195;depend方法中出现了一个target对象，根据上下文我发现它是一个watcher实例，watcher里也维护了一个类似subs的栈来管理dep（暂且叫他deps吧），调用这个方法的dep会被放入watcher的deps栈中。现在我们先不关心watcher到底是什么鬼，继续往下看。（看名字应该能猜得出来吧）<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//添加追踪</span></div><div class=\"line\">Dep.prototype.depend = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">depend</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (Dep.target) &#123;</div><div class=\"line\">        Dep.target.addDep(<span class=\"keyword\">this</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p>&#8195;&#8195;再来看看target在Dep上的定义，它是Dep的类属性，并且通过一个全局的targetStack对其进行管理，很明显通过Dep访问target在任何时候都是一个唯一确定的。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//这里的target是一个watcher实例</span></div><div class=\"line\">Dep.target = <span class=\"literal\">null</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> targetStack = [];</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">pushTarget</span> (<span class=\"params\">_target</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (Dep.target) &#123; targetStack.push(Dep.target); &#125;</div><div class=\"line\">    Dep.target = _target;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">popTarget</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    Dep.target = targetStack.pop();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>&#8195;&#8195;notify方法用来通知subs栈中的每一个订阅者数据变更<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">Dep.prototype.notify = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">notify</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">//slice方法是最简单的数组拷贝（记住js中对象赋值是引用赋值）</span></div><div class=\"line\">    <span class=\"keyword\">var</span> subs = <span class=\"keyword\">this</span>.subs.slice();</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>, l = subs.length; i &lt; l; i++) &#123;</div><div class=\"line\">        <span class=\"comment\">//每一个subs元素都是一个对象，所以subs[i] === this.subs[i]</span></div><div class=\"line\">        <span class=\"comment\">//为什么不直接用this.subs[i].update()</span></div><div class=\"line\">        <span class=\"comment\">//stablize the subscriber list first（这是作者给的注释）</span></div><div class=\"line\">        subs[i].update();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<h3 id=\"Observer对象\"><a href=\"#Observer对象\" class=\"headerlink\" title=\"Observer对象\"></a>Observer对象</h3><p>&#8195;&#8195;Observer对象扮演观察者的角色，是这个模式中绝对的主角。创建Observer对象需要给一个value参数，value即是需要reactive化的数据。value被Observer包装之后会增加一个属性<strong>ob</strong>，它指向Observer本身（有点像隐式原型）。一个Observer对象包含3个属性：value自身的引用，dep实例，以及一个看起来好像是计数器的vmCount。value的值好像是没有什么要求的，如果value是一个数组那么就会执行一系列数组reactive化的方法。（这个稍后再来看，继续往下）<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//把需要ob的data封装成一个Observer对象</span></div><div class=\"line\"><span class=\"keyword\">var</span> Observer = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Observer</span> (<span class=\"params\">value</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.value = value;</div><div class=\"line\">    <span class=\"comment\">//ob.value可以访问到他的值</span></div><div class=\"line\">    <span class=\"keyword\">this</span>.dep = <span class=\"keyword\">new</span> Dep();</div><div class=\"line\">    <span class=\"keyword\">this</span>.vmCount = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"comment\">//当有根元素的时候才会给vmCount++</span></div><div class=\"line\">    def(value, <span class=\"string\">'__ob__'</span>, <span class=\"keyword\">this</span>);</div><div class=\"line\">    <span class=\"comment\">//value.__ob__ = ob类似于__proto__的设计</span></div><div class=\"line\">    <span class=\"comment\">//数组和其他类型的处理方式不同</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">Array</span>.isArray(value)) &#123;</div><div class=\"line\">        <span class=\"comment\">//var hasProto = '__proto__' in &#123;&#125;;</span></div><div class=\"line\">        <span class=\"comment\">//由于__proto__并非标准属性，所以需要判断其是否可用</span></div><div class=\"line\">        <span class=\"comment\">//__proto__指向隐式原型[[prototype]]</span></div><div class=\"line\">        <span class=\"keyword\">var</span> augment = hasProto</div><div class=\"line\">        ? protoAugment</div><div class=\"line\">        : copyAugment;</div><div class=\"line\">        <span class=\"comment\">//把value的数组方法替换成之前定义好的那些响应式方法</span></div><div class=\"line\">        augment(value, arrayMethods, arrayKeys);</div><div class=\"line\">        <span class=\"keyword\">this</span>.observeArray(value);</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.walk(value);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p>&#8195;&#8195;如果value不是数组就会执行下面这个walk方法，这里其实value就是被当成了object处理，如果不是，那么什么也不会发生，value中所有的属性都会被defineReactive$$1方法处理。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">Observer.prototype.walk = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">walk</span> (<span class=\"params\">obj</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> keys = <span class=\"built_in\">Object</span>.keys(obj);</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; keys.length; i++) &#123;</div><div class=\"line\">        <span class=\"comment\">//把obj的普通属性转换成reactive属性（ob对象）</span></div><div class=\"line\">        defineReactive$$<span class=\"number\">1</span>(obj, keys[i], obj[keys[i]]);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p>&#8195;&#8195;defineReactive$$1接收四个参数，这里只用到了前三个，第一个参数value，后面两个分别是value属性的键和值。具体来看这个方法，第一行怎么又特么new了一个dep，不同于Ob对象具有dep属性，像number，string这种基本属性由于不是对象所以挂载不了Ob，而这里的dep就是用来追踪基本属性的。实际上执行defineReactive$$1相当于创建了一个闭包，利用闭包的特性，每一个基本属性都能访问到一个唯一的dep。<br>&#8195;&#8195;defineReactive$$1会尝试获取属性的set，get方法，一般得属性都是没有这两个方法的，除非有特别定义过，如果有get，set方法后面定义新的set，get会用到。<br>&#8195;&#8195;var childOb = observe(val);又出现了一个方法observe，它的作用是reactive化传入的参数。当val是一个对象时（数组也是对象），val也会被reactive化并把挂载的ob返回回来。<br>&#8195;&#8195;再然后就是给val属性设置get和set方法（如果你还不知道get，set方法的作用那就可以回去重修了），好像忽略了enumerable和configurable，这两个属性设置为true之后val就是可枚举可修改的了（默认的属性都是可枚举可修改的）。看看get方法的设置，每次获取val的值都会调用dep.depend往watcher中添加追踪，这里就有个疑问，每次都添加会不会重复添加很多dep，想想应该是不会的，前面有提到dep会有一个全局唯一的标志，添加的时候应该会判断一下（这里总感觉怪怪的，每次都添加会不会影响效率呢？），如果val是一个对象那就把reactive化之后的dep添加到watcher中。set方法中会调用dep.notify也就是我们想要的当属性发生变化时发出通知，dep中包含的订阅都会收到这个通知。如果set的属性是一个对象也会调用observe方法对它进行reactive化。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div></pre></td><td class=\"code\"><pre><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">defineReactive$$1</span> (<span class=\"params\"></span></span></div><div class=\"line\">    obj,</div><div class=\"line\">    key,</div><div class=\"line\">    val,</div><div class=\"line\">    customSetter</div><div class=\"line\">) &#123;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">var</span> dep = <span class=\"keyword\">new</span> Dep();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">var</span> property = <span class=\"built_in\">Object</span>.getOwnPropertyDescriptor(obj, key);</div><div class=\"line\">    <span class=\"keyword\">if</span> (property &amp;&amp; property.configurable === <span class=\"literal\">false</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//没有特别定义过的对象都是没有默认的get和set方法的</span></div><div class=\"line\">    <span class=\"keyword\">var</span> getter = property &amp;&amp; property.get;</div><div class=\"line\">    <span class=\"keyword\">var</span> setter = property &amp;&amp; property.set;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//如果val是一个对象就会被包装成ob对象</span></div><div class=\"line\">    <span class=\"keyword\">var</span> childOb = observe(val);</div><div class=\"line\">    <span class=\"built_in\">Object</span>.defineProperty(obj, key, &#123;</div><div class=\"line\">        <span class=\"attr\">enumerable</span>: <span class=\"literal\">true</span>,</div><div class=\"line\">        <span class=\"attr\">configurable</span>: <span class=\"literal\">true</span>,</div><div class=\"line\">        <span class=\"attr\">get</span>: <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">reactiveGetter</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">var</span> value = getter ? getter.call(obj) : val;</div><div class=\"line\">            <span class=\"comment\">//当Dep.target存在时把所有的依赖收集起来,调用watcher的addDep方法</span></div><div class=\"line\">            <span class=\"comment\">//前面有提到target是一个watcher对象</span></div><div class=\"line\">            <span class=\"keyword\">if</span> (Dep.target) &#123;</div><div class=\"line\">                dep.depend();</div><div class=\"line\">                <span class=\"keyword\">if</span> (childOb) &#123;</div><div class=\"line\">                    childOb.dep.depend();</div><div class=\"line\">                &#125;</div><div class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"built_in\">Array</span>.isArray(value)) &#123;</div><div class=\"line\">                    dependArray(value);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">return</span> value</div><div class=\"line\">        &#125;,</div><div class=\"line\">        <span class=\"attr\">set</span>: <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">reactiveSetter</span> (<span class=\"params\">newVal</span>) </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">var</span> value = getter ? getter.call(obj) : val;</div><div class=\"line\">            <span class=\"comment\">//如果新的值和之前的值一样的话就不继续往下执行</span></div><div class=\"line\">            <span class=\"keyword\">if</span> (newVal === value || (newVal !== newVal &amp;&amp; value !== value)) &#123;</div><div class=\"line\">                <span class=\"keyword\">return</span></div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"string\">\"development\"</span> !== <span class=\"string\">'production'</span> &amp;&amp; customSetter) &#123;</div><div class=\"line\">                customSetter();</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"comment\">//如果有set方法调用set方法</span></div><div class=\"line\">            <span class=\"keyword\">if</span> (setter) &#123;</div><div class=\"line\">                setter.call(obj, newVal);</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                val = newVal;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"comment\">//设置的新值如果是个对象的话就调用observe把他变成ob对象</span></div><div class=\"line\">            childOb = observe(newVal);</div><div class=\"line\">            <span class=\"comment\">//通知变更</span></div><div class=\"line\">            dep.notify();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>&#8195;&#8195;从get、set方法中我们大致可以看出一些vue进行对象reactive化的规律，我们不能通过value.data = data来设置一个新的属性，因为这样不会触发set的reactive化，取而代之的是使用value = obj（新的对象），当然在value对象下的属性有声明的时候可以直接通过value.data = data来赋值。但是我们发现对于数组好像不是那么回事，数组元素中增加一个值并不会触发set方法也就不会收到通知，我们不可能每次都给数组全量替换进行赋值。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">observe</span> (<span class=\"params\">value, asRootData</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (!isObject(value)) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">var</span> ob;</div><div class=\"line\">    <span class=\"keyword\">if</span> (hasOwn(value, <span class=\"string\">'__ob__'</span>) &amp;&amp; value.__ob__ <span class=\"keyword\">instanceof</span> Observer) &#123;</div><div class=\"line\">        ob = value.__ob__;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (</div><div class=\"line\">        observerState.shouldConvert &amp;&amp;</div><div class=\"line\">        !isServerRendering() &amp;&amp;</div><div class=\"line\">        (<span class=\"built_in\">Array</span>.isArray(value) || isPlainObject(value)) &amp;&amp;</div><div class=\"line\">        <span class=\"built_in\">Object</span>.isExtensible(value) &amp;&amp;</div><div class=\"line\">        !value._isVue</div><div class=\"line\">    ) &#123;</div><div class=\"line\">        ob = <span class=\"keyword\">new</span> Observer(value);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span> (asRootData &amp;&amp; ob) &#123;</div><div class=\"line\">        ob.vmCount++;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> ob</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"数组\"><a href=\"#数组\" class=\"headerlink\" title=\"数组\"></a>数组</h3><p>&#8195;&#8195;对于数组的reactive化会比对象的稍微复杂一些，因为数组元素的增加删除不会触发set方法。Vue中采用了封装数组方法的方式来捕捉数组元素的变化，首先收集到所有会对数组产生影响的方法，除了 [] = [1,2]（这种方法会触发set）,push、pop、shift、unshift、splice、sort、reverse。数组方法还有很多，例如：concat、slice、map等，但是这些方法不会在数组上直接进行操作，也不会对数组产生副作用。<br>&#8195;&#8195;通过重写数组方法，在其中插入钩子，每次执行这些数组方法的时候都调用notify进行更新通知，且在有新数组插入是调用observeArray方法进行reactive化。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//arrayMethods继承自Array对象</span></div><div class=\"line\"><span class=\"keyword\">var</span> arrayProto = <span class=\"built_in\">Array</span>.prototype;</div><div class=\"line\"><span class=\"keyword\">var</span> arrayMethods = <span class=\"built_in\">Object</span>.create(arrayProto);</div><div class=\"line\">[</div><div class=\"line\">    <span class=\"string\">'push'</span>,</div><div class=\"line\">    <span class=\"string\">'pop'</span>,</div><div class=\"line\">    <span class=\"string\">'shift'</span>,</div><div class=\"line\">    <span class=\"string\">'unshift'</span>,</div><div class=\"line\">    <span class=\"string\">'splice'</span>,</div><div class=\"line\">    <span class=\"string\">'sort'</span>,</div><div class=\"line\">    <span class=\"string\">'reverse'</span></div><div class=\"line\">].forEach(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">method</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> original = arrayProto[method];</div><div class=\"line\">    <span class=\"comment\">/*</span></div><div class=\"line\">     *  function def (obj, key, val, enumerable) &#123;</div><div class=\"line\">     *     Object.defineProperty(obj, key, &#123;</div><div class=\"line\">     *          value: val,</div><div class=\"line\">     *          enumerable: !!enumerable,</div><div class=\"line\">     *          writable: true,</div><div class=\"line\">     *          configurable: true</div><div class=\"line\">     *      &#125;);</div><div class=\"line\">     *  &#125;</div><div class=\"line\">     */</div><div class=\"line\">    def(arrayMethods, method, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">mutator</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"comment\">//把arguments赋值给arguments$1是为了提高速度</span></div><div class=\"line\">        <span class=\"comment\">//作者给了原文链接http://jsperf.com/closure-with-arguments</span></div><div class=\"line\">        <span class=\"comment\">//这里可以看到测试结果（长姿势）</span></div><div class=\"line\">        <span class=\"keyword\">var</span> <span class=\"built_in\">arguments</span>$<span class=\"number\">1</span> = <span class=\"built_in\">arguments</span>;</div><div class=\"line\">        <span class=\"keyword\">var</span> i = <span class=\"built_in\">arguments</span>.length;</div><div class=\"line\">        <span class=\"keyword\">var</span> args = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(i);</div><div class=\"line\">        <span class=\"keyword\">while</span> (i--) &#123;</div><div class=\"line\">            args[i] = <span class=\"built_in\">arguments</span>$<span class=\"number\">1</span>[i];</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"comment\">//这句代码应该是为了保证重新定义过的方法保持不变</span></div><div class=\"line\">        <span class=\"keyword\">var</span> result = original.apply(<span class=\"keyword\">this</span>, args);</div><div class=\"line\">        <span class=\"keyword\">var</span> ob = <span class=\"keyword\">this</span>.__ob__;</div><div class=\"line\">        <span class=\"keyword\">var</span> inserted;</div><div class=\"line\">        <span class=\"comment\">//push，unshift，splice这三个方法会往数组中添加值</span></div><div class=\"line\">        <span class=\"keyword\">switch</span> (method) &#123;</div><div class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">'push'</span>:</div><div class=\"line\">                inserted = args;</div><div class=\"line\">                <span class=\"keyword\">break</span></div><div class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">'unshift'</span>:</div><div class=\"line\">                inserted = args;</div><div class=\"line\">                <span class=\"keyword\">break</span></div><div class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">'splice'</span>:</div><div class=\"line\">                inserted = args.slice(<span class=\"number\">2</span>);</div><div class=\"line\">                <span class=\"keyword\">break</span></div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">if</span> (inserted) &#123; ob.observeArray(inserted); &#125;</div><div class=\"line\">        ob.dep.notify();</div><div class=\"line\">        <span class=\"keyword\">return</span> result</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> arrayKeys = <span class=\"built_in\">Object</span>.getOwnPropertyNames(arrayMethods);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> observerState = &#123;</div><div class=\"line\">    <span class=\"attr\">shouldConvert</span>: <span class=\"literal\">true</span>,</div><div class=\"line\">    <span class=\"attr\">isSettingProps</span>: <span class=\"literal\">false</span></div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">Observer.prototype.observeArray = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">observeArray</span> (<span class=\"params\">items</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>, l = items.length; i &lt; l; i++) &#123;</div><div class=\"line\">        observe(items[i]);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">protoAugment</span> (<span class=\"params\">target, src</span>) </span>&#123;</div><div class=\"line\">    target.__proto__ = src;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">copyAugment</span> (<span class=\"params\">target, src, keys</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>, l = keys.length; i &lt; l; i++) &#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> key = keys[i];</div><div class=\"line\">        def(target, key, src[key]);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">dependArray</span> (<span class=\"params\">value</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">//e = (void 0) === e = undifined</span></div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> e = (<span class=\"keyword\">void</span> <span class=\"number\">0</span>), i = <span class=\"number\">0</span>, l = value.length; i &lt; l; i++) &#123;</div><div class=\"line\">        e = value[i];</div><div class=\"line\">        e &amp;&amp; e.__ob__ &amp;&amp; e.__ob__.dep.depend();</div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">Array</span>.isArray(e)) &#123;</div><div class=\"line\">            dependArray(e);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cjabu1rgp0000hktplvufitlz","tag_id":"cjabu1rh90004hktpdrwo06t8","_id":"cjabu1rhr0008hktpyeoja2j0"},{"post_id":"cjabu1rh50002hktpjo6pd9eu","tag_id":"cjabu1rhq0007hktpnrv0teab","_id":"cjabu1rhu000ahktpdochp62r"},{"post_id":"cjabu1rhm0006hktpek42axoz","tag_id":"cjabu1rhq0007hktpnrv0teab","_id":"cjabu1rhw000dhktpz86gpeev"}],"Tag":[{"name":"http","_id":"cjabu1rh90004hktpdrwo06t8"},{"name":"javascript","_id":"cjabu1rhq0007hktpnrv0teab"},{"name":"面试经验","_id":"cjabu1rhu0009hktpevg2wmnh"}]}}